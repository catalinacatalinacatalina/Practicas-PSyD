
#include <s3c44b0x.h>
#include <lcd.h>

static uint8 state;
extern uint8 font[];
uint8 lcd_buffer[LCD_BUFFER_SIZE];


void lcd_init(void)
{
    DITHMODE = 0x12210;
    DP1_2    = 0xA5A5;
    DP4_7    = 0xBA5DA65;
    DP3_5    = 0xA5A5F;
    DP2_3    = 0xD6B;
    DP5_7    = 0xEB7B5ED;
    DP3_4    = 0x7DBE;
    DP4_5    = 0x7EBDF;
    DP6_7    = 0x7FDFBFE;

    REDLUT   = 0x00000000;
    GREENLUT = 0x00000000;
    BLUELUT  = 0x0000;

    LCDCON1  = 0x1C020;
    LCDCON2  = 0x13CEF;
    LCDCON3  = 0x0;

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
    LCDSADDR3 = 0x50;

    lcd_off();
}

void lcd_on(void)
{
    LCDCON1 |= (1 << 0); // Activa la señal de salida de video.
    state = LCDCON1;
}

void lcd_off(void)
{
    LCDCON1 &= ~(1 << 0); // Desactiva la señal de salida de video.
    state = LCDCON1;
}

uint8 lcd_status(void)
{
    return state;
}

void lcd_clear(void)
{
	uint16 i, j;
	for(i = 0; i < 320; ++i){
		for(j = 0; j < 240; ++j){
			lcd_putpixel(i, j, WHITE);
		}
	}
}

void lcd_putpixel(uint16 x, uint16 y, uint8 c)
{
    uint8 byte, bit;
    uint16 i;

    i = x / 2 + y * (LCD_WIDTH / 2);
    bit = (1 - x % 2) * 4;

    byte = lcd_buffer[i];
    byte &= ~(0xF << bit);
    byte |= c << bit;
    lcd_buffer[i] = byte;
}

uint8 lcd_getpixel(uint16 x, uint16 y)
{
    uint8 byte, bit;
    uint16 i;
    i = x/2 + y*(LCD_WIDTH/2);
    bit = (1 - x % 2) * 4;
    byte = lcd_buffer[i] >> bit;
    byte &= 0x0f;

    return byte;
}

void lcd_draw_hrow(uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width)
{
	uint16 i = 0;
    while ( i < width)
    {
    	uint16 x = xleft;
        while ( x <= xright)
        {
            lcd_putpixel(x, y + i, color);
            x++;
        }
        i++;
    }
}

void lcd_draw_vrow(uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width)
{
	uint16 i = 0;
    while ( i < width)
    {
    	uint16 y = yup;
        while ( y <= ydown)
        {
            lcd_putpixel(x + i, y, color);
            y++;
        }
        i++;
    }
}

void lcd_draw_box(uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width)
{
    lcd_draw_hrow(xleft, xright, yup, color, width);   // Línea superior.
    lcd_draw_hrow(xleft, xright, ydown, color, width); // Línea inferior.
    lcd_draw_vrow(yup, ydown, xleft, color, width);    // Línea izquierda.
    lcd_draw_vrow(yup, ydown, xright, color, width);   // Línea derecha.
}

void lcd_putchar(uint16 x, uint16 y, uint8 color, char ch)
{
    uint8 row, col;
    uint8 *bitmap = font + ch * 16;
    for (row = 0; row < 16; row++)
    {
        for (col = 0; col < 8; col++)
        {
            if (bitmap[row] & (0x80 >> col))
                lcd_putpixel(x + col, y + row, color);
            else
                lcd_putpixel(x + col, y + row, WHITE);
        }
    }
}

void lcd_puts(uint16 x, uint16 y, uint8 color, char *s)
{
    while (*s)
    {
        lcd_putchar(x, y, color, *s++);
        x += 8; // Avanza la posición x para el siguiente carácter.
    }
}

void lcd_putint(uint16 x, uint16 y, uint8 color, int32 i)
{
	char buf[12];
	   char *p = buf + 11;
	   int is_negative = 0;

	   *p = '\0';

	   if (i < 0) {
	       is_negative = 1;
	       i = -i;
	   }

	   do {
	       *--p = '0' + (i % 10);
	       i /= 10;
	   } while (i);

	   if (is_negative) {
	       *--p = '-';
	   }

	   lcd_puts(x, y, color, p);
}

void lcd_puthex(uint16 x, uint16 y, uint8 color, uint32 i)
{
	char buf[8 + 1];
	    char *p = buf + 8;
	    uint8 c;

	    *p = '\0';

	    do {
	        c = i & 0xf;
	        if( c < 10 )
	            *--p = '0' + c;
	        else
	            *--p = 'a' + c - 10;
	        i = i >> 4;
	    } while( i );

	    lcd_puts(x, y, color, p );
}

void lcd_putchar_x2(uint16 x, uint16 y, uint8 color, char ch)
{
    uint8 row, col;
    uint8 *bitmap = font + ch * 16;

    for (row = 0; row < 16; row++)
    {
        for (col = 0; col < 8; col++)
        {
            if (bitmap[row] & (0x80 >> col))
            {
                lcd_putpixel(x + col * 2, y + row * 2, color);
                lcd_putpixel(x + col * 2 + 1, y + row * 2, color);
                lcd_putpixel(x + col * 2, y + row * 2 + 1, color);
                lcd_putpixel(x + col * 2 + 1, y + row * 2 + 1, color);
            }
            else
            {
                lcd_putpixel(x + col * 2, y + row * 2, WHITE);
                lcd_putpixel(x + col * 2 + 1, y + row * 2, WHITE);
                lcd_putpixel(x + col * 2, y + row * 2 + 1, WHITE);
                lcd_putpixel(x + col * 2 + 1, y + row * 2 + 1, WHITE);
            }
        }
    }
}

void lcd_puts_x2(uint16 x, uint16 y, uint8 color, char *s)
{
    while (*s)
    {
        lcd_putchar_x2(x, y, color, *s++);
        x += 16; // Avanza la posición x para el siguiente carácter.
    }
}

void lcd_putint_x2(uint16 x, uint16 y, uint8 color, int32 i)
{
	char buf[12];
		   char *p = buf + 11;
		   int is_negative = 0;

		   *p = '\0';

		   if (i < 0) {
		       is_negative = 1;
		       i = -i;
		   }

		   do {
		       *--p = '0' + (i % 10);
		       i /= 10;
		   } while (i);

		   if (is_negative) {
		       *--p = '-';
		   }

		   lcd_puts_x2(x, y, color, p);
}

void lcd_puthex_x2(uint16 x, uint16 y, uint8 color, uint32 i)
{
	char buf[8 + 1];
		    char *p = buf + 8;
		    uint8 c;

		    *p = '\0';

		    do {
		        c = i & 0xf;
		        if( c < 10 )
		            *--p = '0' + c;
		        else
		            *--p = 'a' + c - 10;
		        i = i >> 4;
		    } while( i );

		    lcd_puts_x2(x, y, color, p );
}

void lcd_putWallpaper(uint8 *bmp)
{
    uint32 headerSize;
    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
    bmp += headerSize;

    for (ySrc = 0, yDst = LCD_HEIGHT - 1; ySrc < LCD_HEIGHT; ySrc++, yDst--)
    {
        offsetDst = yDst * LCD_WIDTH / 2;
        offsetSrc = ySrc * LCD_WIDTH / 2;
        for (x = 0; x < LCD_WIDTH / 2; x++)
            lcd_buffer[offsetDst + x] = ~bmp[offsetSrc + x];
    }
}
lcd.c
Mostrando lcd.c.
