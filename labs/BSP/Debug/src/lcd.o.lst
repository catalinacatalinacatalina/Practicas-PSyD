   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../src/lcd.c"
 1703              	state:
 1704 0000 00       		.space	1
 1705              		.comm	lcd_buffer,38400,4
 1706              		.text
 1707              		.align	2
 1708              		.global	lcd_init
 1710              	lcd_init:
 1711              	.LFB0:
   1:../src/lcd.c  **** 
   2:../src/lcd.c  **** #include <s3c44b0x.h>
   3:../src/lcd.c  **** #include <lcd.h>
   4:../src/lcd.c  **** 
   5:../src/lcd.c  **** static uint8 state;
   6:../src/lcd.c  **** extern uint8 font[];
   7:../src/lcd.c  **** uint8 lcd_buffer[LCD_BUFFER_SIZE];
   8:../src/lcd.c  **** 
   9:../src/lcd.c  **** 
  10:../src/lcd.c  **** void lcd_init(void)
  11:../src/lcd.c  **** {
 1712              		.loc 1 11 0
 1713              		.cfi_startproc
 1714              		@ Function supports interworking.
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717 0000 0DC0A0E1 		mov	ip, sp
 1718              	.LCFI0:
 1719              		.cfi_def_cfa_register 12
 1720 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1721 0008 04B04CE2 		sub	fp, ip, #4
 1722              		.cfi_offset 14, -8
 1723              		.cfi_offset 13, -12
 1724              		.cfi_offset 11, -16
 1725              	.LCFI1:
 1726              		.cfi_def_cfa 11, 4
  12:../src/lcd.c  ****     DITHMODE = 0x12210;
 1727              		.loc 1 12 0
 1728 000c FC309FE5 		ldr	r3, .L2
 1729 0010 FC209FE5 		ldr	r2, .L2+4
 1730 0014 002083E5 		str	r2, [r3, #0]
  13:../src/lcd.c  ****     DP1_2    = 0xA5A5;
 1731              		.loc 1 13 0
 1732 0018 F8309FE5 		ldr	r3, .L2+8
 1733 001c F8209FE5 		ldr	r2, .L2+12
 1734 0020 002083E5 		str	r2, [r3, #0]
  14:../src/lcd.c  ****     DP4_7    = 0xBA5DA65;
 1735              		.loc 1 14 0
 1736 0024 F4309FE5 		ldr	r3, .L2+16
 1737 0028 F4209FE5 		ldr	r2, .L2+20
 1738 002c 002083E5 		str	r2, [r3, #0]
  15:../src/lcd.c  ****     DP3_5    = 0xA5A5F;
 1739              		.loc 1 15 0
 1740 0030 F0309FE5 		ldr	r3, .L2+24
 1741 0034 F0209FE5 		ldr	r2, .L2+28
 1742 0038 002083E5 		str	r2, [r3, #0]
  16:../src/lcd.c  ****     DP2_3    = 0xD6B;
 1743              		.loc 1 16 0
 1744 003c EC309FE5 		ldr	r3, .L2+32
 1745 0040 EC209FE5 		ldr	r2, .L2+36
 1746 0044 002083E5 		str	r2, [r3, #0]
  17:../src/lcd.c  ****     DP5_7    = 0xEB7B5ED;
 1747              		.loc 1 17 0
 1748 0048 E8309FE5 		ldr	r3, .L2+40
 1749 004c E8209FE5 		ldr	r2, .L2+44
 1750 0050 002083E5 		str	r2, [r3, #0]
  18:../src/lcd.c  ****     DP3_4    = 0x7DBE;
 1751              		.loc 1 18 0
 1752 0054 E4309FE5 		ldr	r3, .L2+48
 1753 0058 E4209FE5 		ldr	r2, .L2+52
 1754 005c 002083E5 		str	r2, [r3, #0]
  19:../src/lcd.c  ****     DP4_5    = 0x7EBDF;
 1755              		.loc 1 19 0
 1756 0060 E0309FE5 		ldr	r3, .L2+56
 1757 0064 E0209FE5 		ldr	r2, .L2+60
 1758 0068 002083E5 		str	r2, [r3, #0]
  20:../src/lcd.c  ****     DP6_7    = 0x7FDFBFE;
 1759              		.loc 1 20 0
 1760 006c DC309FE5 		ldr	r3, .L2+64
 1761 0070 DC209FE5 		ldr	r2, .L2+68
 1762 0074 002083E5 		str	r2, [r3, #0]
  21:../src/lcd.c  **** 
  22:../src/lcd.c  ****     REDLUT   = 0x00000000;
 1763              		.loc 1 22 0
 1764 0078 D8309FE5 		ldr	r3, .L2+72
 1765 007c 0020A0E3 		mov	r2, #0
 1766 0080 002083E5 		str	r2, [r3, #0]
  23:../src/lcd.c  ****     GREENLUT = 0x00000000;
 1767              		.loc 1 23 0
 1768 0084 D0309FE5 		ldr	r3, .L2+76
 1769 0088 0020A0E3 		mov	r2, #0
 1770 008c 002083E5 		str	r2, [r3, #0]
  24:../src/lcd.c  ****     BLUELUT  = 0x0000;
 1771              		.loc 1 24 0
 1772 0090 C8309FE5 		ldr	r3, .L2+80
 1773 0094 0020A0E3 		mov	r2, #0
 1774 0098 002083E5 		str	r2, [r3, #0]
  25:../src/lcd.c  **** 
  26:../src/lcd.c  ****     LCDCON1  = 0x1C020;
 1775              		.loc 1 26 0
 1776 009c 1F36A0E3 		mov	r3, #32505856
 1777 00a0 BC209FE5 		ldr	r2, .L2+84
 1778 00a4 002083E5 		str	r2, [r3, #0]
  27:../src/lcd.c  ****     LCDCON2  = 0x13CEF;
 1779              		.loc 1 27 0
 1780 00a8 B8309FE5 		ldr	r3, .L2+88
 1781 00ac B8209FE5 		ldr	r2, .L2+92
 1782 00b0 002083E5 		str	r2, [r3, #0]
  28:../src/lcd.c  ****     LCDCON3  = 0x0;
 1783              		.loc 1 28 0
 1784 00b4 B4309FE5 		ldr	r3, .L2+96
 1785 00b8 0020A0E3 		mov	r2, #0
 1786 00bc 002083E5 		str	r2, [r3, #0]
  29:../src/lcd.c  **** 
  30:../src/lcd.c  ****     LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1787              		.loc 1 30 0
 1788 00c0 AC309FE5 		ldr	r3, .L2+100
 1789 00c4 AC209FE5 		ldr	r2, .L2+104
 1790 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1791 00cc 012282E3 		orr	r2, r2, #268435456
 1792 00d0 002083E5 		str	r2, [r3, #0]
  31:../src/lcd.c  ****     LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1793              		.loc 1 31 0
 1794 00d4 A0209FE5 		ldr	r2, .L2+108
 1795 00d8 98309FE5 		ldr	r3, .L2+104
 1796 00dc 963C83E2 		add	r3, r3, #38400
 1797 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1798 00e4 0335C3E3 		bic	r3, r3, #12582912
 1799 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1800 00ec 023283E3 		orr	r3, r3, #536870912
 1801 00f0 003082E5 		str	r3, [r2, #0]
  32:../src/lcd.c  ****     LCDSADDR3 = 0x50;
 1802              		.loc 1 32 0
 1803 00f4 84309FE5 		ldr	r3, .L2+112
 1804 00f8 5020A0E3 		mov	r2, #80
 1805 00fc 002083E5 		str	r2, [r3, #0]
  33:../src/lcd.c  **** 
  34:../src/lcd.c  ****     lcd_off();
 1806              		.loc 1 34 0
 1807 0100 FEFFFFEB 		bl	lcd_off
  35:../src/lcd.c  **** }
 1808              		.loc 1 35 0
 1809 0104 0CD04BE2 		sub	sp, fp, #12
 1810 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1811 010c 1EFF2FE1 		bx	lr
 1812              	.L3:
 1813              		.align	2
 1814              	.L2:
 1815 0110 4400F001 		.word	32505924
 1816 0114 10220100 		.word	74256
 1817 0118 2000F001 		.word	32505888
 1818 011c A5A50000 		.word	42405
 1819 0120 2400F001 		.word	32505892
 1820 0124 65DAA50B 		.word	195418725
 1821 0128 2800F001 		.word	32505896
 1822 012c 5F5A0A00 		.word	678495
 1823 0130 2C00F001 		.word	32505900
 1824 0134 6B0D0000 		.word	3435
 1825 0138 3000F001 		.word	32505904
 1826 013c EDB5B70E 		.word	246920685
 1827 0140 3400F001 		.word	32505908
 1828 0144 BE7D0000 		.word	32190
 1829 0148 3800F001 		.word	32505912
 1830 014c DFEB0700 		.word	519135
 1831 0150 3C00F001 		.word	32505916
 1832 0154 FEFBFD07 		.word	134085630
 1833 0158 1400F001 		.word	32505876
 1834 015c 1800F001 		.word	32505880
 1835 0160 1C00F001 		.word	32505884
 1836 0164 20C00100 		.word	114720
 1837 0168 0400F001 		.word	32505860
 1838 016c EF3C0100 		.word	81135
 1839 0170 4000F001 		.word	32505920
 1840 0174 0800F001 		.word	32505864
 1841 0178 00000000 		.word	lcd_buffer
 1842 017c 0C00F001 		.word	32505868
 1843 0180 1000F001 		.word	32505872
 1844              		.cfi_endproc
 1845              	.LFE0:
 1847              		.align	2
 1848              		.global	lcd_on
 1850              	lcd_on:
 1851              	.LFB1:
  36:../src/lcd.c  **** 
  37:../src/lcd.c  **** void lcd_on(void)
  38:../src/lcd.c  **** {
 1852              		.loc 1 38 0
 1853              		.cfi_startproc
 1854              		@ Function supports interworking.
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857 0184 0DC0A0E1 		mov	ip, sp
 1858              	.LCFI2:
 1859              		.cfi_def_cfa_register 12
 1860 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1861 018c 04B04CE2 		sub	fp, ip, #4
 1862              		.cfi_offset 14, -8
 1863              		.cfi_offset 13, -12
 1864              		.cfi_offset 11, -16
 1865              	.LCFI3:
 1866              		.cfi_def_cfa 11, 4
  39:../src/lcd.c  ****     LCDCON1 |= (1 << 0); // Activa la señal de salida de video.
 1867              		.loc 1 39 0
 1868 0190 1F36A0E3 		mov	r3, #32505856
 1869 0194 1F26A0E3 		mov	r2, #32505856
 1870 0198 002092E5 		ldr	r2, [r2, #0]
 1871 019c 012082E3 		orr	r2, r2, #1
 1872 01a0 002083E5 		str	r2, [r3, #0]
  40:../src/lcd.c  ****     state = LCDCON1;
 1873              		.loc 1 40 0
 1874 01a4 1F36A0E3 		mov	r3, #32505856
 1875 01a8 003093E5 		ldr	r3, [r3, #0]
 1876 01ac FF2003E2 		and	r2, r3, #255
 1877 01b0 0C309FE5 		ldr	r3, .L5
 1878 01b4 0020C3E5 		strb	r2, [r3, #0]
  41:../src/lcd.c  **** }
 1879              		.loc 1 41 0
 1880 01b8 0CD04BE2 		sub	sp, fp, #12
 1881 01bc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1882 01c0 1EFF2FE1 		bx	lr
 1883              	.L6:
 1884              		.align	2
 1885              	.L5:
 1886 01c4 00000000 		.word	state
 1887              		.cfi_endproc
 1888              	.LFE1:
 1890              		.align	2
 1891              		.global	lcd_off
 1893              	lcd_off:
 1894              	.LFB2:
  42:../src/lcd.c  **** 
  43:../src/lcd.c  **** void lcd_off(void)
  44:../src/lcd.c  **** {
 1895              		.loc 1 44 0
 1896              		.cfi_startproc
 1897              		@ Function supports interworking.
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 1, uses_anonymous_args = 0
 1900 01c8 0DC0A0E1 		mov	ip, sp
 1901              	.LCFI4:
 1902              		.cfi_def_cfa_register 12
 1903 01cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1904 01d0 04B04CE2 		sub	fp, ip, #4
 1905              		.cfi_offset 14, -8
 1906              		.cfi_offset 13, -12
 1907              		.cfi_offset 11, -16
 1908              	.LCFI5:
 1909              		.cfi_def_cfa 11, 4
  45:../src/lcd.c  ****     LCDCON1 &= ~(1 << 0); // Desactiva la señal de salida de video.
 1910              		.loc 1 45 0
 1911 01d4 1F36A0E3 		mov	r3, #32505856
 1912 01d8 1F26A0E3 		mov	r2, #32505856
 1913 01dc 002092E5 		ldr	r2, [r2, #0]
 1914 01e0 0120C2E3 		bic	r2, r2, #1
 1915 01e4 002083E5 		str	r2, [r3, #0]
  46:../src/lcd.c  ****     state = LCDCON1;
 1916              		.loc 1 46 0
 1917 01e8 1F36A0E3 		mov	r3, #32505856
 1918 01ec 003093E5 		ldr	r3, [r3, #0]
 1919 01f0 FF2003E2 		and	r2, r3, #255
 1920 01f4 0C309FE5 		ldr	r3, .L8
 1921 01f8 0020C3E5 		strb	r2, [r3, #0]
  47:../src/lcd.c  **** }
 1922              		.loc 1 47 0
 1923 01fc 0CD04BE2 		sub	sp, fp, #12
 1924 0200 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1925 0204 1EFF2FE1 		bx	lr
 1926              	.L9:
 1927              		.align	2
 1928              	.L8:
 1929 0208 00000000 		.word	state
 1930              		.cfi_endproc
 1931              	.LFE2:
 1933              		.align	2
 1934              		.global	lcd_status
 1936              	lcd_status:
 1937              	.LFB3:
  48:../src/lcd.c  **** 
  49:../src/lcd.c  **** uint8 lcd_status(void)
  50:../src/lcd.c  **** {
 1938              		.loc 1 50 0
 1939              		.cfi_startproc
 1940              		@ Function supports interworking.
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 1, uses_anonymous_args = 0
 1943 020c 0DC0A0E1 		mov	ip, sp
 1944              	.LCFI6:
 1945              		.cfi_def_cfa_register 12
 1946 0210 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1947 0214 04B04CE2 		sub	fp, ip, #4
 1948              		.cfi_offset 14, -8
 1949              		.cfi_offset 13, -12
 1950              		.cfi_offset 11, -16
 1951              	.LCFI7:
 1952              		.cfi_def_cfa 11, 4
  51:../src/lcd.c  ****     return state;
 1953              		.loc 1 51 0
 1954 0218 10309FE5 		ldr	r3, .L11
 1955 021c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  52:../src/lcd.c  **** }
 1956              		.loc 1 52 0
 1957 0220 0300A0E1 		mov	r0, r3
 1958 0224 0CD04BE2 		sub	sp, fp, #12
 1959 0228 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1960 022c 1EFF2FE1 		bx	lr
 1961              	.L12:
 1962              		.align	2
 1963              	.L11:
 1964 0230 00000000 		.word	state
 1965              		.cfi_endproc
 1966              	.LFE3:
 1968              		.align	2
 1969              		.global	lcd_clear
 1971              	lcd_clear:
 1972              	.LFB4:
  53:../src/lcd.c  **** 
  54:../src/lcd.c  **** void lcd_clear(void)
  55:../src/lcd.c  **** {
 1973              		.loc 1 55 0
 1974              		.cfi_startproc
 1975              		@ Function supports interworking.
 1976              		@ args = 0, pretend = 0, frame = 8
 1977              		@ frame_needed = 1, uses_anonymous_args = 0
 1978 0234 0DC0A0E1 		mov	ip, sp
 1979              	.LCFI8:
 1980              		.cfi_def_cfa_register 12
 1981 0238 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1982 023c 04B04CE2 		sub	fp, ip, #4
 1983              		.cfi_offset 14, -8
 1984              		.cfi_offset 13, -12
 1985              		.cfi_offset 11, -16
 1986              	.LCFI9:
 1987              		.cfi_def_cfa 11, 4
 1988 0240 08D04DE2 		sub	sp, sp, #8
  56:../src/lcd.c  **** 	uint16 i, j;
  57:../src/lcd.c  **** 	for(i = 0; i < 320; ++i){
 1989              		.loc 1 57 0
 1990 0244 0030A0E3 		mov	r3, #0
 1991 0248 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 1992 024c 110000EA 		b	.L14
 1993              	.L17:
  58:../src/lcd.c  **** 		for(j = 0; j < 240; ++j){
 1994              		.loc 1 58 0
 1995 0250 0030A0E3 		mov	r3, #0
 1996 0254 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 1997 0258 080000EA 		b	.L15
 1998              	.L16:
  59:../src/lcd.c  **** 			lcd_putpixel(i, j, WHITE);
 1999              		.loc 1 59 0 discriminator 2
 2000 025c BE205BE1 		ldrh	r2, [fp, #-14]
 2001 0260 B0315BE1 		ldrh	r3, [fp, #-16]
 2002 0264 0200A0E1 		mov	r0, r2
 2003 0268 0310A0E1 		mov	r1, r3
 2004 026c 0020A0E3 		mov	r2, #0
 2005 0270 FEFFFFEB 		bl	lcd_putpixel
  58:../src/lcd.c  **** 		for(j = 0; j < 240; ++j){
 2006              		.loc 1 58 0 discriminator 2
 2007 0274 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2008 0278 013083E2 		add	r3, r3, #1
 2009 027c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2010              	.L15:
  58:../src/lcd.c  **** 		for(j = 0; j < 240; ++j){
 2011              		.loc 1 58 0 is_stmt 0 discriminator 1
 2012 0280 B0315BE1 		ldrh	r3, [fp, #-16]
 2013 0284 EF0053E3 		cmp	r3, #239
 2014 0288 F3FFFF9A 		bls	.L16
  57:../src/lcd.c  **** 	for(i = 0; i < 320; ++i){
 2015              		.loc 1 57 0 is_stmt 1
 2016 028c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2017 0290 013083E2 		add	r3, r3, #1
 2018 0294 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2019              	.L14:
  57:../src/lcd.c  **** 	for(i = 0; i < 320; ++i){
 2020              		.loc 1 57 0 is_stmt 0 discriminator 1
 2021 0298 BE205BE1 		ldrh	r2, [fp, #-14]
 2022 029c 10309FE5 		ldr	r3, .L18
 2023 02a0 030052E1 		cmp	r2, r3
 2024 02a4 E9FFFF9A 		bls	.L17
  60:../src/lcd.c  **** 		}
  61:../src/lcd.c  **** 	}
  62:../src/lcd.c  **** }
 2025              		.loc 1 62 0 is_stmt 1
 2026 02a8 0CD04BE2 		sub	sp, fp, #12
 2027 02ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2028 02b0 1EFF2FE1 		bx	lr
 2029              	.L19:
 2030              		.align	2
 2031              	.L18:
 2032 02b4 3F010000 		.word	319
 2033              		.cfi_endproc
 2034              	.LFE4:
 2036              		.align	2
 2037              		.global	lcd_putpixel
 2039              	lcd_putpixel:
 2040              	.LFB5:
  63:../src/lcd.c  **** 
  64:../src/lcd.c  **** void lcd_putpixel(uint16 x, uint16 y, uint8 c)
  65:../src/lcd.c  **** {
 2041              		.loc 1 65 0
 2042              		.cfi_startproc
 2043              		@ Function supports interworking.
 2044              		@ args = 0, pretend = 0, frame = 16
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046 02b8 0DC0A0E1 		mov	ip, sp
 2047              	.LCFI10:
 2048              		.cfi_def_cfa_register 12
 2049 02bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2050 02c0 04B04CE2 		sub	fp, ip, #4
 2051              		.cfi_offset 14, -8
 2052              		.cfi_offset 13, -12
 2053              		.cfi_offset 11, -16
 2054              	.LCFI11:
 2055              		.cfi_def_cfa 11, 4
 2056 02c4 10D04DE2 		sub	sp, sp, #16
 2057 02c8 0230A0E1 		mov	r3, r2
 2058 02cc B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2059 02d0 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2060 02d4 19304BE5 		strb	r3, [fp, #-25]
  66:../src/lcd.c  ****     uint8 byte, bit;
  67:../src/lcd.c  ****     uint16 i;
  68:../src/lcd.c  **** 
  69:../src/lcd.c  ****     i = x / 2 + y * (LCD_WIDTH / 2);
 2061              		.loc 1 69 0
 2062 02d8 B6315BE1 		ldrh	r3, [fp, #-22]
 2063 02dc A330A0E1 		mov	r3, r3, lsr #1
 2064 02e0 0338A0E1 		mov	r3, r3, asl #16
 2065 02e4 2328A0E1 		mov	r2, r3, lsr #16
 2066 02e8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2067 02ec 0310A0E1 		mov	r1, r3	@ movhi
 2068 02f0 0111A0E1 		mov	r1, r1, asl #2
 2069 02f4 033081E0 		add	r3, r1, r3
 2070 02f8 8332A0E1 		mov	r3, r3, asl #5
 2071 02fc 0338A0E1 		mov	r3, r3, asl #16
 2072 0300 2338A0E1 		mov	r3, r3, lsr #16
 2073 0304 033082E0 		add	r3, r2, r3
 2074 0308 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  70:../src/lcd.c  ****     bit = (1 - x % 2) * 4;
 2075              		.loc 1 70 0
 2076 030c B6315BE1 		ldrh	r3, [fp, #-22]
 2077 0310 013003E2 		and	r3, r3, #1
 2078 0314 000053E3 		cmp	r3, #0
 2079 0318 0100001A 		bne	.L21
 2080              		.loc 1 70 0 is_stmt 0 discriminator 1
 2081 031c 0430A0E3 		mov	r3, #4
 2082 0320 000000EA 		b	.L22
 2083              	.L21:
 2084              		.loc 1 70 0 discriminator 2
 2085 0324 0030A0E3 		mov	r3, #0
 2086              	.L22:
 2087              		.loc 1 70 0 discriminator 3
 2088 0328 0F304BE5 		strb	r3, [fp, #-15]
  71:../src/lcd.c  **** 
  72:../src/lcd.c  ****     byte = lcd_buffer[i];
 2089              		.loc 1 72 0 is_stmt 1 discriminator 3
 2090 032c BE305BE1 		ldrh	r3, [fp, #-14]
 2091 0330 68209FE5 		ldr	r2, .L23
 2092 0334 0330D2E7 		ldrb	r3, [r2, r3]
 2093 0338 10304BE5 		strb	r3, [fp, #-16]
  73:../src/lcd.c  ****     byte &= ~(0xF << bit);
 2094              		.loc 1 73 0 discriminator 3
 2095 033c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2096 0340 0F20A0E3 		mov	r2, #15
 2097 0344 1233A0E1 		mov	r3, r2, asl r3
 2098 0348 FF3003E2 		and	r3, r3, #255
 2099 034c 0330E0E1 		mvn	r3, r3
 2100 0350 FF2003E2 		and	r2, r3, #255
 2101 0354 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2102 0358 033002E0 		and	r3, r2, r3
 2103 035c FF3003E2 		and	r3, r3, #255
 2104 0360 10304BE5 		strb	r3, [fp, #-16]
  74:../src/lcd.c  ****     byte |= c << bit;
 2105              		.loc 1 74 0 discriminator 3
 2106 0364 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2107 0368 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2108 036c 1233A0E1 		mov	r3, r2, asl r3
 2109 0370 FF2003E2 		and	r2, r3, #255
 2110 0374 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2111 0378 033082E1 		orr	r3, r2, r3
 2112 037c FF3003E2 		and	r3, r3, #255
 2113 0380 10304BE5 		strb	r3, [fp, #-16]
  75:../src/lcd.c  ****     lcd_buffer[i] = byte;
 2114              		.loc 1 75 0 discriminator 3
 2115 0384 BE305BE1 		ldrh	r3, [fp, #-14]
 2116 0388 10209FE5 		ldr	r2, .L23
 2117 038c 10105BE5 		ldrb	r1, [fp, #-16]
 2118 0390 0310C2E7 		strb	r1, [r2, r3]
  76:../src/lcd.c  **** }
 2119              		.loc 1 76 0 discriminator 3
 2120 0394 0CD04BE2 		sub	sp, fp, #12
 2121 0398 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2122 039c 1EFF2FE1 		bx	lr
 2123              	.L24:
 2124              		.align	2
 2125              	.L23:
 2126 03a0 00000000 		.word	lcd_buffer
 2127              		.cfi_endproc
 2128              	.LFE5:
 2130              		.align	2
 2131              		.global	lcd_getpixel
 2133              	lcd_getpixel:
 2134              	.LFB6:
  77:../src/lcd.c  **** 
  78:../src/lcd.c  **** uint8 lcd_getpixel(uint16 x, uint16 y)
  79:../src/lcd.c  **** {
 2135              		.loc 1 79 0
 2136              		.cfi_startproc
 2137              		@ Function supports interworking.
 2138              		@ args = 0, pretend = 0, frame = 16
 2139              		@ frame_needed = 1, uses_anonymous_args = 0
 2140 03a4 0DC0A0E1 		mov	ip, sp
 2141              	.LCFI12:
 2142              		.cfi_def_cfa_register 12
 2143 03a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2144 03ac 04B04CE2 		sub	fp, ip, #4
 2145              		.cfi_offset 14, -8
 2146              		.cfi_offset 13, -12
 2147              		.cfi_offset 11, -16
 2148              	.LCFI13:
 2149              		.cfi_def_cfa 11, 4
 2150 03b0 10D04DE2 		sub	sp, sp, #16
 2151 03b4 0020A0E1 		mov	r2, r0
 2152 03b8 0130A0E1 		mov	r3, r1
 2153 03bc B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2154 03c0 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  80:../src/lcd.c  ****     uint8 byte, bit;
  81:../src/lcd.c  ****     uint16 i;
  82:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2155              		.loc 1 82 0
 2156 03c4 B6315BE1 		ldrh	r3, [fp, #-22]
 2157 03c8 A330A0E1 		mov	r3, r3, lsr #1
 2158 03cc 0338A0E1 		mov	r3, r3, asl #16
 2159 03d0 2328A0E1 		mov	r2, r3, lsr #16
 2160 03d4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2161 03d8 0310A0E1 		mov	r1, r3	@ movhi
 2162 03dc 0111A0E1 		mov	r1, r1, asl #2
 2163 03e0 033081E0 		add	r3, r1, r3
 2164 03e4 8332A0E1 		mov	r3, r3, asl #5
 2165 03e8 0338A0E1 		mov	r3, r3, asl #16
 2166 03ec 2338A0E1 		mov	r3, r3, lsr #16
 2167 03f0 033082E0 		add	r3, r2, r3
 2168 03f4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  83:../src/lcd.c  ****     bit = (1 - x % 2) * 4;
 2169              		.loc 1 83 0
 2170 03f8 B6315BE1 		ldrh	r3, [fp, #-22]
 2171 03fc 013003E2 		and	r3, r3, #1
 2172 0400 000053E3 		cmp	r3, #0
 2173 0404 0100001A 		bne	.L26
 2174              		.loc 1 83 0 is_stmt 0 discriminator 1
 2175 0408 0430A0E3 		mov	r3, #4
 2176 040c 000000EA 		b	.L27
 2177              	.L26:
 2178              		.loc 1 83 0 discriminator 2
 2179 0410 0030A0E3 		mov	r3, #0
 2180              	.L27:
 2181              		.loc 1 83 0 discriminator 3
 2182 0414 0F304BE5 		strb	r3, [fp, #-15]
  84:../src/lcd.c  ****     byte = lcd_buffer[i] >> bit;
 2183              		.loc 1 84 0 is_stmt 1 discriminator 3
 2184 0418 BE305BE1 		ldrh	r3, [fp, #-14]
 2185 041c 30209FE5 		ldr	r2, .L28
 2186 0420 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2187 0424 0320A0E1 		mov	r2, r3
 2188 0428 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2189 042c 5233A0E1 		mov	r3, r2, asr r3
 2190 0430 10304BE5 		strb	r3, [fp, #-16]
  85:../src/lcd.c  ****     byte &= 0x0f;
 2191              		.loc 1 85 0 discriminator 3
 2192 0434 10305BE5 		ldrb	r3, [fp, #-16]
 2193 0438 0F3003E2 		and	r3, r3, #15
 2194 043c 10304BE5 		strb	r3, [fp, #-16]
  86:../src/lcd.c  **** 
  87:../src/lcd.c  ****     return byte;
 2195              		.loc 1 87 0 discriminator 3
 2196 0440 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
  88:../src/lcd.c  **** }
 2197              		.loc 1 88 0 discriminator 3
 2198 0444 0300A0E1 		mov	r0, r3
 2199 0448 0CD04BE2 		sub	sp, fp, #12
 2200 044c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2201 0450 1EFF2FE1 		bx	lr
 2202              	.L29:
 2203              		.align	2
 2204              	.L28:
 2205 0454 00000000 		.word	lcd_buffer
 2206              		.cfi_endproc
 2207              	.LFE6:
 2209              		.align	2
 2210              		.global	lcd_draw_hrow
 2212              	lcd_draw_hrow:
 2213              	.LFB7:
  89:../src/lcd.c  **** 
  90:../src/lcd.c  **** void lcd_draw_hrow(uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width)
  91:../src/lcd.c  **** {
 2214              		.loc 1 91 0
 2215              		.cfi_startproc
 2216              		@ Function supports interworking.
 2217              		@ args = 4, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0458 0DC0A0E1 		mov	ip, sp
 2220              	.LCFI14:
 2221              		.cfi_def_cfa_register 12
 2222 045c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2223 0460 04B04CE2 		sub	fp, ip, #4
 2224              		.cfi_offset 14, -8
 2225              		.cfi_offset 13, -12
 2226              		.cfi_offset 11, -16
 2227              	.LCFI15:
 2228              		.cfi_def_cfa 11, 4
 2229 0464 10D04DE2 		sub	sp, sp, #16
 2230 0468 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2231 046c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2232 0470 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2233 0474 1B304BE5 		strb	r3, [fp, #-27]
  92:../src/lcd.c  **** 	uint16 i = 0;
 2234              		.loc 1 92 0
 2235 0478 0030A0E3 		mov	r3, #0
 2236 047c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  93:../src/lcd.c  ****     while ( i < width)
 2237              		.loc 1 93 0
 2238 0480 170000EA 		b	.L31
 2239              	.L34:
 2240              	.LBB2:
  94:../src/lcd.c  ****     {
  95:../src/lcd.c  ****     	uint16 x = xleft;
 2241              		.loc 1 95 0
 2242 0484 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2243 0488 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
  96:../src/lcd.c  ****         while ( x <= xright)
 2244              		.loc 1 96 0
 2245 048c 0D0000EA 		b	.L32
 2246              	.L33:
  97:../src/lcd.c  ****         {
  98:../src/lcd.c  ****             lcd_putpixel(x, y + i, color);
 2247              		.loc 1 98 0
 2248 0490 BA215BE1 		ldrh	r2, [fp, #-26]	@ movhi
 2249 0494 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2250 0498 033082E0 		add	r3, r2, r3
 2251 049c 0338A0E1 		mov	r3, r3, asl #16
 2252 04a0 2328A0E1 		mov	r2, r3, lsr #16
 2253 04a4 B0115BE1 		ldrh	r1, [fp, #-16]
 2254 04a8 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2255 04ac 0100A0E1 		mov	r0, r1
 2256 04b0 0210A0E1 		mov	r1, r2
 2257 04b4 0320A0E1 		mov	r2, r3
 2258 04b8 FEFFFFEB 		bl	lcd_putpixel
  99:../src/lcd.c  ****             x++;
 2259              		.loc 1 99 0
 2260 04bc B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2261 04c0 013083E2 		add	r3, r3, #1
 2262 04c4 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2263              	.L32:
  96:../src/lcd.c  ****         while ( x <= xright)
 2264              		.loc 1 96 0 discriminator 1
 2265 04c8 B0215BE1 		ldrh	r2, [fp, #-16]
 2266 04cc B8315BE1 		ldrh	r3, [fp, #-24]
 2267 04d0 030052E1 		cmp	r2, r3
 2268 04d4 EDFFFF9A 		bls	.L33
 100:../src/lcd.c  ****         }
 101:../src/lcd.c  ****         i++;
 2269              		.loc 1 101 0
 2270 04d8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2271 04dc 013083E2 		add	r3, r3, #1
 2272 04e0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2273              	.L31:
 2274              	.LBE2:
  93:../src/lcd.c  ****     while ( i < width)
 2275              		.loc 1 93 0 discriminator 1
 2276 04e4 BE205BE1 		ldrh	r2, [fp, #-14]
 2277 04e8 B430DBE1 		ldrh	r3, [fp, #4]
 2278 04ec 030052E1 		cmp	r2, r3
 2279 04f0 E3FFFF3A 		bcc	.L34
 102:../src/lcd.c  ****     }
 103:../src/lcd.c  **** }
 2280              		.loc 1 103 0
 2281 04f4 0CD04BE2 		sub	sp, fp, #12
 2282 04f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2283 04fc 1EFF2FE1 		bx	lr
 2284              		.cfi_endproc
 2285              	.LFE7:
 2287              		.align	2
 2288              		.global	lcd_draw_vrow
 2290              	lcd_draw_vrow:
 2291              	.LFB8:
 104:../src/lcd.c  **** 
 105:../src/lcd.c  **** void lcd_draw_vrow(uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width)
 106:../src/lcd.c  **** {
 2292              		.loc 1 106 0
 2293              		.cfi_startproc
 2294              		@ Function supports interworking.
 2295              		@ args = 4, pretend = 0, frame = 16
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297 0500 0DC0A0E1 		mov	ip, sp
 2298              	.LCFI16:
 2299              		.cfi_def_cfa_register 12
 2300 0504 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2301 0508 04B04CE2 		sub	fp, ip, #4
 2302              		.cfi_offset 14, -8
 2303              		.cfi_offset 13, -12
 2304              		.cfi_offset 11, -16
 2305              	.LCFI17:
 2306              		.cfi_def_cfa 11, 4
 2307 050c 10D04DE2 		sub	sp, sp, #16
 2308 0510 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2309 0514 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2310 0518 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2311 051c 1B304BE5 		strb	r3, [fp, #-27]
 107:../src/lcd.c  **** 	uint16 i = 0;
 2312              		.loc 1 107 0
 2313 0520 0030A0E3 		mov	r3, #0
 2314 0524 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 108:../src/lcd.c  ****     while ( i < width)
 2315              		.loc 1 108 0
 2316 0528 170000EA 		b	.L36
 2317              	.L39:
 2318              	.LBB3:
 109:../src/lcd.c  ****     {
 110:../src/lcd.c  ****     	uint16 y = yup;
 2319              		.loc 1 110 0
 2320 052c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2321 0530 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 111:../src/lcd.c  ****         while ( y <= ydown)
 2322              		.loc 1 111 0
 2323 0534 0D0000EA 		b	.L37
 2324              	.L38:
 112:../src/lcd.c  ****         {
 113:../src/lcd.c  ****             lcd_putpixel(x + i, y, color);
 2325              		.loc 1 113 0
 2326 0538 BA215BE1 		ldrh	r2, [fp, #-26]	@ movhi
 2327 053c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2328 0540 033082E0 		add	r3, r2, r3
 2329 0544 0338A0E1 		mov	r3, r3, asl #16
 2330 0548 2318A0E1 		mov	r1, r3, lsr #16
 2331 054c B0215BE1 		ldrh	r2, [fp, #-16]
 2332 0550 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2333 0554 0100A0E1 		mov	r0, r1
 2334 0558 0210A0E1 		mov	r1, r2
 2335 055c 0320A0E1 		mov	r2, r3
 2336 0560 FEFFFFEB 		bl	lcd_putpixel
 114:../src/lcd.c  ****             y++;
 2337              		.loc 1 114 0
 2338 0564 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2339 0568 013083E2 		add	r3, r3, #1
 2340 056c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2341              	.L37:
 111:../src/lcd.c  ****         while ( y <= ydown)
 2342              		.loc 1 111 0 discriminator 1
 2343 0570 B0215BE1 		ldrh	r2, [fp, #-16]
 2344 0574 B8315BE1 		ldrh	r3, [fp, #-24]
 2345 0578 030052E1 		cmp	r2, r3
 2346 057c EDFFFF9A 		bls	.L38
 115:../src/lcd.c  ****         }
 116:../src/lcd.c  ****         i++;
 2347              		.loc 1 116 0
 2348 0580 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2349 0584 013083E2 		add	r3, r3, #1
 2350 0588 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2351              	.L36:
 2352              	.LBE3:
 108:../src/lcd.c  ****     while ( i < width)
 2353              		.loc 1 108 0 discriminator 1
 2354 058c BE205BE1 		ldrh	r2, [fp, #-14]
 2355 0590 B430DBE1 		ldrh	r3, [fp, #4]
 2356 0594 030052E1 		cmp	r2, r3
 2357 0598 E3FFFF3A 		bcc	.L39
 117:../src/lcd.c  ****     }
 118:../src/lcd.c  **** }
 2358              		.loc 1 118 0
 2359 059c 0CD04BE2 		sub	sp, fp, #12
 2360 05a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2361 05a4 1EFF2FE1 		bx	lr
 2362              		.cfi_endproc
 2363              	.LFE8:
 2365              		.align	2
 2366              		.global	lcd_draw_box
 2368              	lcd_draw_box:
 2369              	.LFB9:
 119:../src/lcd.c  **** 
 120:../src/lcd.c  **** void lcd_draw_box(uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width)
 121:../src/lcd.c  **** {
 2370              		.loc 1 121 0
 2371              		.cfi_startproc
 2372              		@ Function supports interworking.
 2373              		@ args = 8, pretend = 0, frame = 8
 2374              		@ frame_needed = 1, uses_anonymous_args = 0
 2375 05a8 0DC0A0E1 		mov	ip, sp
 2376              	.LCFI18:
 2377              		.cfi_def_cfa_register 12
 2378 05ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2379 05b0 04B04CE2 		sub	fp, ip, #4
 2380              		.cfi_offset 14, -8
 2381              		.cfi_offset 13, -12
 2382              		.cfi_offset 11, -16
 2383              	.LCFI19:
 2384              		.cfi_def_cfa 11, 4
 2385 05b4 10D04DE2 		sub	sp, sp, #16
 2386 05b8 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2387 05bc B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2388 05c0 B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2389 05c4 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 122:../src/lcd.c  ****     lcd_draw_hrow(xleft, xright, yup, color, width);   // Línea superior.
 2390              		.loc 1 122 0
 2391 05c8 BE005BE1 		ldrh	r0, [fp, #-14]
 2392 05cc B2115BE1 		ldrh	r1, [fp, #-18]
 2393 05d0 B0215BE1 		ldrh	r2, [fp, #-16]
 2394 05d4 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2395 05d8 B8C0DBE1 		ldrh	ip, [fp, #8]
 2396 05dc 00C08DE5 		str	ip, [sp, #0]
 2397 05e0 FEFFFFEB 		bl	lcd_draw_hrow
 123:../src/lcd.c  ****     lcd_draw_hrow(xleft, xright, ydown, color, width); // Línea inferior.
 2398              		.loc 1 123 0
 2399 05e4 BE005BE1 		ldrh	r0, [fp, #-14]
 2400 05e8 B2115BE1 		ldrh	r1, [fp, #-18]
 2401 05ec B4215BE1 		ldrh	r2, [fp, #-20]
 2402 05f0 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2403 05f4 B8C0DBE1 		ldrh	ip, [fp, #8]
 2404 05f8 00C08DE5 		str	ip, [sp, #0]
 2405 05fc FEFFFFEB 		bl	lcd_draw_hrow
 124:../src/lcd.c  ****     lcd_draw_vrow(yup, ydown, xleft, color, width);    // Línea izquierda.
 2406              		.loc 1 124 0
 2407 0600 B0015BE1 		ldrh	r0, [fp, #-16]
 2408 0604 B4115BE1 		ldrh	r1, [fp, #-20]
 2409 0608 BE205BE1 		ldrh	r2, [fp, #-14]
 2410 060c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2411 0610 B8C0DBE1 		ldrh	ip, [fp, #8]
 2412 0614 00C08DE5 		str	ip, [sp, #0]
 2413 0618 FEFFFFEB 		bl	lcd_draw_vrow
 125:../src/lcd.c  ****     lcd_draw_vrow(yup, ydown, xright, color, width);   // Línea derecha.
 2414              		.loc 1 125 0
 2415 061c B0015BE1 		ldrh	r0, [fp, #-16]
 2416 0620 B4115BE1 		ldrh	r1, [fp, #-20]
 2417 0624 B2215BE1 		ldrh	r2, [fp, #-18]
 2418 0628 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2419 062c B8C0DBE1 		ldrh	ip, [fp, #8]
 2420 0630 00C08DE5 		str	ip, [sp, #0]
 2421 0634 FEFFFFEB 		bl	lcd_draw_vrow
 126:../src/lcd.c  **** }
 2422              		.loc 1 126 0
 2423 0638 0CD04BE2 		sub	sp, fp, #12
 2424 063c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2425 0640 1EFF2FE1 		bx	lr
 2426              		.cfi_endproc
 2427              	.LFE9:
 2429              		.align	2
 2430              		.global	lcd_putchar
 2432              	lcd_putchar:
 2433              	.LFB10:
 127:../src/lcd.c  **** 
 128:../src/lcd.c  **** void lcd_putchar(uint16 x, uint16 y, uint8 color, char ch)
 129:../src/lcd.c  **** {
 2434              		.loc 1 129 0
 2435              		.cfi_startproc
 2436              		@ Function supports interworking.
 2437              		@ args = 0, pretend = 0, frame = 16
 2438              		@ frame_needed = 1, uses_anonymous_args = 0
 2439 0644 0DC0A0E1 		mov	ip, sp
 2440              	.LCFI20:
 2441              		.cfi_def_cfa_register 12
 2442 0648 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2443 064c 04B04CE2 		sub	fp, ip, #4
 2444              		.cfi_offset 14, -8
 2445              		.cfi_offset 13, -12
 2446              		.cfi_offset 11, -16
 2447              	.LCFI21:
 2448              		.cfi_def_cfa 11, 4
 2449 0650 10D04DE2 		sub	sp, sp, #16
 2450 0654 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2451 0658 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2452 065c 19204BE5 		strb	r2, [fp, #-25]
 2453 0660 1A304BE5 		strb	r3, [fp, #-26]
 130:../src/lcd.c  ****     uint8 row, col;
 131:../src/lcd.c  ****     uint8 *bitmap = font + ch * 16;
 2454              		.loc 1 131 0
 2455 0664 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2456 0668 0332A0E1 		mov	r3, r3, asl #4
 2457 066c 0320A0E1 		mov	r2, r3
 2458 0670 1C319FE5 		ldr	r3, .L48
 2459 0674 033082E0 		add	r3, r2, r3
 2460 0678 14300BE5 		str	r3, [fp, #-20]
 132:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 2461              		.loc 1 132 0
 2462 067c 0030A0E3 		mov	r3, #0
 2463 0680 0D304BE5 		strb	r3, [fp, #-13]
 2464 0684 3C0000EA 		b	.L42
 2465              	.L47:
 133:../src/lcd.c  ****     {
 134:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 2466              		.loc 1 134 0
 2467 0688 0030A0E3 		mov	r3, #0
 2468 068c 0E304BE5 		strb	r3, [fp, #-14]
 2469 0690 330000EA 		b	.L43
 2470              	.L46:
 135:../src/lcd.c  ****         {
 136:../src/lcd.c  ****             if (bitmap[row] & (0x80 >> col))
 2471              		.loc 1 136 0
 2472 0694 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2473 0698 14201BE5 		ldr	r2, [fp, #-20]
 2474 069c 033082E0 		add	r3, r2, r3
 2475 06a0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2476 06a4 0320A0E1 		mov	r2, r3
 2477 06a8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2478 06ac 8010A0E3 		mov	r1, #128
 2479 06b0 5133A0E1 		mov	r3, r1, asr r3
 2480 06b4 033002E0 		and	r3, r2, r3
 2481 06b8 000053E3 		cmp	r3, #0
 2482 06bc 1300000A 		beq	.L44
 137:../src/lcd.c  ****                 lcd_putpixel(x + col, y + row, color);
 2483              		.loc 1 137 0
 2484 06c0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2485 06c4 0338A0E1 		mov	r3, r3, asl #16
 2486 06c8 2328A0E1 		mov	r2, r3, lsr #16
 2487 06cc B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2488 06d0 033082E0 		add	r3, r2, r3
 2489 06d4 0338A0E1 		mov	r3, r3, asl #16
 2490 06d8 2318A0E1 		mov	r1, r3, lsr #16
 2491 06dc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2492 06e0 0338A0E1 		mov	r3, r3, asl #16
 2493 06e4 2328A0E1 		mov	r2, r3, lsr #16
 2494 06e8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2495 06ec 033082E0 		add	r3, r2, r3
 2496 06f0 0338A0E1 		mov	r3, r3, asl #16
 2497 06f4 2328A0E1 		mov	r2, r3, lsr #16
 2498 06f8 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2499 06fc 0100A0E1 		mov	r0, r1
 2500 0700 0210A0E1 		mov	r1, r2
 2501 0704 0320A0E1 		mov	r2, r3
 2502 0708 FEFFFFEB 		bl	lcd_putpixel
 2503 070c 110000EA 		b	.L45
 2504              	.L44:
 138:../src/lcd.c  ****             else
 139:../src/lcd.c  ****                 lcd_putpixel(x + col, y + row, WHITE);
 2505              		.loc 1 139 0
 2506 0710 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2507 0714 0338A0E1 		mov	r3, r3, asl #16
 2508 0718 2328A0E1 		mov	r2, r3, lsr #16
 2509 071c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2510 0720 033082E0 		add	r3, r2, r3
 2511 0724 0338A0E1 		mov	r3, r3, asl #16
 2512 0728 2328A0E1 		mov	r2, r3, lsr #16
 2513 072c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2514 0730 0338A0E1 		mov	r3, r3, asl #16
 2515 0734 2318A0E1 		mov	r1, r3, lsr #16
 2516 0738 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2517 073c 033081E0 		add	r3, r1, r3
 2518 0740 0338A0E1 		mov	r3, r3, asl #16
 2519 0744 2338A0E1 		mov	r3, r3, lsr #16
 2520 0748 0200A0E1 		mov	r0, r2
 2521 074c 0310A0E1 		mov	r1, r3
 2522 0750 0020A0E3 		mov	r2, #0
 2523 0754 FEFFFFEB 		bl	lcd_putpixel
 2524              	.L45:
 134:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 2525              		.loc 1 134 0
 2526 0758 0E305BE5 		ldrb	r3, [fp, #-14]
 2527 075c 013083E2 		add	r3, r3, #1
 2528 0760 0E304BE5 		strb	r3, [fp, #-14]
 2529              	.L43:
 134:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 2530              		.loc 1 134 0 is_stmt 0 discriminator 1
 2531 0764 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2532 0768 070053E3 		cmp	r3, #7
 2533 076c C8FFFF9A 		bls	.L46
 132:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 2534              		.loc 1 132 0 is_stmt 1
 2535 0770 0D305BE5 		ldrb	r3, [fp, #-13]
 2536 0774 013083E2 		add	r3, r3, #1
 2537 0778 0D304BE5 		strb	r3, [fp, #-13]
 2538              	.L42:
 132:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 2539              		.loc 1 132 0 is_stmt 0 discriminator 1
 2540 077c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2541 0780 0F0053E3 		cmp	r3, #15
 2542 0784 BFFFFF9A 		bls	.L47
 140:../src/lcd.c  ****         }
 141:../src/lcd.c  ****     }
 142:../src/lcd.c  **** }
 2543              		.loc 1 142 0 is_stmt 1
 2544 0788 0CD04BE2 		sub	sp, fp, #12
 2545 078c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2546 0790 1EFF2FE1 		bx	lr
 2547              	.L49:
 2548              		.align	2
 2549              	.L48:
 2550 0794 00000000 		.word	font
 2551              		.cfi_endproc
 2552              	.LFE10:
 2554              		.align	2
 2555              		.global	lcd_puts
 2557              	lcd_puts:
 2558              	.LFB11:
 143:../src/lcd.c  **** 
 144:../src/lcd.c  **** void lcd_puts(uint16 x, uint16 y, uint8 color, char *s)
 145:../src/lcd.c  **** {
 2559              		.loc 1 145 0
 2560              		.cfi_startproc
 2561              		@ Function supports interworking.
 2562              		@ args = 0, pretend = 0, frame = 16
 2563              		@ frame_needed = 1, uses_anonymous_args = 0
 2564 0798 0DC0A0E1 		mov	ip, sp
 2565              	.LCFI22:
 2566              		.cfi_def_cfa_register 12
 2567 079c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2568 07a0 04B04CE2 		sub	fp, ip, #4
 2569              		.cfi_offset 14, -8
 2570              		.cfi_offset 13, -12
 2571              		.cfi_offset 11, -16
 2572              	.LCFI23:
 2573              		.cfi_def_cfa 11, 4
 2574 07a4 10D04DE2 		sub	sp, sp, #16
 2575 07a8 18300BE5 		str	r3, [fp, #-24]
 2576 07ac BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2577 07b0 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2578 07b4 0230A0E1 		mov	r3, r2
 2579 07b8 11304BE5 		strb	r3, [fp, #-17]
 146:../src/lcd.c  ****     while (*s)
 2580              		.loc 1 146 0
 2581 07bc 0B0000EA 		b	.L51
 2582              	.L52:
 147:../src/lcd.c  ****     {
 148:../src/lcd.c  ****         lcd_putchar(x, y, color, *s++);
 2583              		.loc 1 148 0
 2584 07c0 18301BE5 		ldr	r3, [fp, #-24]
 2585 07c4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2586 07c8 18201BE5 		ldr	r2, [fp, #-24]
 2587 07cc 012082E2 		add	r2, r2, #1
 2588 07d0 18200BE5 		str	r2, [fp, #-24]
 2589 07d4 BE005BE1 		ldrh	r0, [fp, #-14]
 2590 07d8 B0115BE1 		ldrh	r1, [fp, #-16]
 2591 07dc 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2592 07e0 FEFFFFEB 		bl	lcd_putchar
 149:../src/lcd.c  ****         x += 8; // Avanza la posición x para el siguiente carácter.
 2593              		.loc 1 149 0
 2594 07e4 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2595 07e8 083083E2 		add	r3, r3, #8
 2596 07ec BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2597              	.L51:
 146:../src/lcd.c  ****     while (*s)
 2598              		.loc 1 146 0 discriminator 1
 2599 07f0 18301BE5 		ldr	r3, [fp, #-24]
 2600 07f4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2601 07f8 000053E3 		cmp	r3, #0
 2602 07fc EFFFFF1A 		bne	.L52
 150:../src/lcd.c  ****     }
 151:../src/lcd.c  **** }
 2603              		.loc 1 151 0
 2604 0800 0CD04BE2 		sub	sp, fp, #12
 2605 0804 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2606 0808 1EFF2FE1 		bx	lr
 2607              		.cfi_endproc
 2608              	.LFE11:
 2610              		.align	2
 2611              		.global	lcd_putint
 2613              	lcd_putint:
 2614              	.LFB12:
 152:../src/lcd.c  **** 
 153:../src/lcd.c  **** void lcd_putint(uint16 x, uint16 y, uint8 color, int32 i)
 154:../src/lcd.c  **** {
 2615              		.loc 1 154 0
 2616              		.cfi_startproc
 2617              		@ Function supports interworking.
 2618              		@ args = 0, pretend = 0, frame = 40
 2619              		@ frame_needed = 1, uses_anonymous_args = 0
 2620 080c 0DC0A0E1 		mov	ip, sp
 2621              	.LCFI24:
 2622              		.cfi_def_cfa_register 12
 2623 0810 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2624 0814 04B04CE2 		sub	fp, ip, #4
 2625              		.cfi_offset 14, -8
 2626              		.cfi_offset 13, -12
 2627              		.cfi_offset 11, -16
 2628              	.LCFI25:
 2629              		.cfi_def_cfa 11, 4
 2630 0818 28D04DE2 		sub	sp, sp, #40
 2631 081c 30300BE5 		str	r3, [fp, #-48]
 2632 0820 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 2633 0824 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 2634 0828 0230A0E1 		mov	r3, r2
 2635 082c 29304BE5 		strb	r3, [fp, #-41]
 155:../src/lcd.c  **** 	char buf[12];
 156:../src/lcd.c  **** 	   char *p = buf + 11;
 2636              		.loc 1 156 0
 2637 0830 20304BE2 		sub	r3, fp, #32
 2638 0834 0B3083E2 		add	r3, r3, #11
 2639 0838 10300BE5 		str	r3, [fp, #-16]
 157:../src/lcd.c  **** 	   int is_negative = 0;
 2640              		.loc 1 157 0
 2641 083c 0030A0E3 		mov	r3, #0
 2642 0840 14300BE5 		str	r3, [fp, #-20]
 158:../src/lcd.c  **** 
 159:../src/lcd.c  **** 	   *p = '\0';
 2643              		.loc 1 159 0
 2644 0844 10301BE5 		ldr	r3, [fp, #-16]
 2645 0848 0020A0E3 		mov	r2, #0
 2646 084c 0020C3E5 		strb	r2, [r3, #0]
 160:../src/lcd.c  **** 
 161:../src/lcd.c  **** 	   if (i < 0) {
 2647              		.loc 1 161 0
 2648 0850 30301BE5 		ldr	r3, [fp, #-48]
 2649 0854 000053E3 		cmp	r3, #0
 2650 0858 040000AA 		bge	.L54
 162:../src/lcd.c  **** 	       is_negative = 1;
 2651              		.loc 1 162 0
 2652 085c 0130A0E3 		mov	r3, #1
 2653 0860 14300BE5 		str	r3, [fp, #-20]
 163:../src/lcd.c  **** 	       i = -i;
 2654              		.loc 1 163 0
 2655 0864 30301BE5 		ldr	r3, [fp, #-48]
 2656 0868 003063E2 		rsb	r3, r3, #0
 2657 086c 30300BE5 		str	r3, [fp, #-48]
 2658              	.L54:
 164:../src/lcd.c  **** 	   }
 165:../src/lcd.c  **** 
 166:../src/lcd.c  **** 	   do {
 167:../src/lcd.c  **** 	       *--p = '0' + (i % 10);
 2659              		.loc 1 167 0 discriminator 1
 2660 0870 10301BE5 		ldr	r3, [fp, #-16]
 2661 0874 013043E2 		sub	r3, r3, #1
 2662 0878 10300BE5 		str	r3, [fp, #-16]
 2663 087c 30101BE5 		ldr	r1, [fp, #-48]
 2664 0880 AC309FE5 		ldr	r3, .L56
 2665 0884 9123C3E0 		smull	r2, r3, r1, r3
 2666 0888 4321A0E1 		mov	r2, r3, asr #2
 2667 088c C13FA0E1 		mov	r3, r1, asr #31
 2668 0890 022063E0 		rsb	r2, r3, r2
 2669 0894 0230A0E1 		mov	r3, r2
 2670 0898 0331A0E1 		mov	r3, r3, asl #2
 2671 089c 023083E0 		add	r3, r3, r2
 2672 08a0 8330A0E1 		mov	r3, r3, asl #1
 2673 08a4 012063E0 		rsb	r2, r3, r1
 2674 08a8 FF3002E2 		and	r3, r2, #255
 2675 08ac 303083E2 		add	r3, r3, #48
 2676 08b0 FF2003E2 		and	r2, r3, #255
 2677 08b4 10301BE5 		ldr	r3, [fp, #-16]
 2678 08b8 0020C3E5 		strb	r2, [r3, #0]
 168:../src/lcd.c  **** 	       i /= 10;
 2679              		.loc 1 168 0 discriminator 1
 2680 08bc 30301BE5 		ldr	r3, [fp, #-48]
 2681 08c0 6C209FE5 		ldr	r2, .L56
 2682 08c4 9312C2E0 		smull	r1, r2, r3, r2
 2683 08c8 4221A0E1 		mov	r2, r2, asr #2
 2684 08cc C33FA0E1 		mov	r3, r3, asr #31
 2685 08d0 023063E0 		rsb	r3, r3, r2
 2686 08d4 30300BE5 		str	r3, [fp, #-48]
 169:../src/lcd.c  **** 	   } while (i);
 2687              		.loc 1 169 0 discriminator 1
 2688 08d8 30301BE5 		ldr	r3, [fp, #-48]
 2689 08dc 000053E3 		cmp	r3, #0
 2690 08e0 E2FFFF1A 		bne	.L54
 170:../src/lcd.c  **** 
 171:../src/lcd.c  **** 	   if (is_negative) {
 2691              		.loc 1 171 0
 2692 08e4 14301BE5 		ldr	r3, [fp, #-20]
 2693 08e8 000053E3 		cmp	r3, #0
 2694 08ec 0500000A 		beq	.L55
 172:../src/lcd.c  **** 	       *--p = '-';
 2695              		.loc 1 172 0
 2696 08f0 10301BE5 		ldr	r3, [fp, #-16]
 2697 08f4 013043E2 		sub	r3, r3, #1
 2698 08f8 10300BE5 		str	r3, [fp, #-16]
 2699 08fc 10301BE5 		ldr	r3, [fp, #-16]
 2700 0900 2D20A0E3 		mov	r2, #45
 2701 0904 0020C3E5 		strb	r2, [r3, #0]
 2702              	.L55:
 173:../src/lcd.c  **** 	   }
 174:../src/lcd.c  **** 
 175:../src/lcd.c  **** 	   lcd_puts(x, y, color, p);
 2703              		.loc 1 175 0
 2704 0908 B6125BE1 		ldrh	r1, [fp, #-38]
 2705 090c B8225BE1 		ldrh	r2, [fp, #-40]
 2706 0910 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 2707 0914 0100A0E1 		mov	r0, r1
 2708 0918 0210A0E1 		mov	r1, r2
 2709 091c 0320A0E1 		mov	r2, r3
 2710 0920 10301BE5 		ldr	r3, [fp, #-16]
 2711 0924 FEFFFFEB 		bl	lcd_puts
 176:../src/lcd.c  **** }
 2712              		.loc 1 176 0
 2713 0928 0CD04BE2 		sub	sp, fp, #12
 2714 092c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2715 0930 1EFF2FE1 		bx	lr
 2716              	.L57:
 2717              		.align	2
 2718              	.L56:
 2719 0934 67666666 		.word	1717986919
 2720              		.cfi_endproc
 2721              	.LFE12:
 2723              		.align	2
 2724              		.global	lcd_puthex
 2726              	lcd_puthex:
 2727              	.LFB13:
 177:../src/lcd.c  **** 
 178:../src/lcd.c  **** void lcd_puthex(uint16 x, uint16 y, uint8 color, uint32 i)
 179:../src/lcd.c  **** {
 2728              		.loc 1 179 0
 2729              		.cfi_startproc
 2730              		@ Function supports interworking.
 2731              		@ args = 0, pretend = 0, frame = 32
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0938 0DC0A0E1 		mov	ip, sp
 2734              	.LCFI26:
 2735              		.cfi_def_cfa_register 12
 2736 093c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2737 0940 04B04CE2 		sub	fp, ip, #4
 2738              		.cfi_offset 14, -8
 2739              		.cfi_offset 13, -12
 2740              		.cfi_offset 11, -16
 2741              	.LCFI27:
 2742              		.cfi_def_cfa 11, 4
 2743 0944 20D04DE2 		sub	sp, sp, #32
 2744 0948 28300BE5 		str	r3, [fp, #-40]
 2745 094c BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2746 0950 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2747 0954 0230A0E1 		mov	r3, r2
 2748 0958 21304BE5 		strb	r3, [fp, #-33]
 180:../src/lcd.c  **** 	char buf[8 + 1];
 181:../src/lcd.c  **** 	    char *p = buf + 8;
 2749              		.loc 1 181 0
 2750 095c 1C304BE2 		sub	r3, fp, #28
 2751 0960 083083E2 		add	r3, r3, #8
 2752 0964 10300BE5 		str	r3, [fp, #-16]
 182:../src/lcd.c  **** 	    uint8 c;
 183:../src/lcd.c  **** 
 184:../src/lcd.c  **** 	    *p = '\0';
 2753              		.loc 1 184 0
 2754 0968 10301BE5 		ldr	r3, [fp, #-16]
 2755 096c 0020A0E3 		mov	r2, #0
 2756 0970 0020C3E5 		strb	r2, [r3, #0]
 2757              	.L61:
 185:../src/lcd.c  **** 
 186:../src/lcd.c  **** 	    do {
 187:../src/lcd.c  **** 	        c = i & 0xf;
 2758              		.loc 1 187 0
 2759 0974 28301BE5 		ldr	r3, [fp, #-40]
 2760 0978 FF3003E2 		and	r3, r3, #255
 2761 097c 0F3003E2 		and	r3, r3, #15
 2762 0980 11304BE5 		strb	r3, [fp, #-17]
 188:../src/lcd.c  **** 	        if( c < 10 )
 2763              		.loc 1 188 0
 2764 0984 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2765 0988 090053E3 		cmp	r3, #9
 2766 098c 0800008A 		bhi	.L59
 189:../src/lcd.c  **** 	            *--p = '0' + c;
 2767              		.loc 1 189 0
 2768 0990 10301BE5 		ldr	r3, [fp, #-16]
 2769 0994 013043E2 		sub	r3, r3, #1
 2770 0998 10300BE5 		str	r3, [fp, #-16]
 2771 099c 11305BE5 		ldrb	r3, [fp, #-17]
 2772 09a0 303083E2 		add	r3, r3, #48
 2773 09a4 FF2003E2 		and	r2, r3, #255
 2774 09a8 10301BE5 		ldr	r3, [fp, #-16]
 2775 09ac 0020C3E5 		strb	r2, [r3, #0]
 2776 09b0 070000EA 		b	.L60
 2777              	.L59:
 190:../src/lcd.c  **** 	        else
 191:../src/lcd.c  **** 	            *--p = 'a' + c - 10;
 2778              		.loc 1 191 0
 2779 09b4 10301BE5 		ldr	r3, [fp, #-16]
 2780 09b8 013043E2 		sub	r3, r3, #1
 2781 09bc 10300BE5 		str	r3, [fp, #-16]
 2782 09c0 11305BE5 		ldrb	r3, [fp, #-17]
 2783 09c4 573083E2 		add	r3, r3, #87
 2784 09c8 FF2003E2 		and	r2, r3, #255
 2785 09cc 10301BE5 		ldr	r3, [fp, #-16]
 2786 09d0 0020C3E5 		strb	r2, [r3, #0]
 2787              	.L60:
 192:../src/lcd.c  **** 	        i = i >> 4;
 2788              		.loc 1 192 0
 2789 09d4 28301BE5 		ldr	r3, [fp, #-40]
 2790 09d8 2332A0E1 		mov	r3, r3, lsr #4
 2791 09dc 28300BE5 		str	r3, [fp, #-40]
 193:../src/lcd.c  **** 	    } while( i );
 2792              		.loc 1 193 0
 2793 09e0 28301BE5 		ldr	r3, [fp, #-40]
 2794 09e4 000053E3 		cmp	r3, #0
 2795 09e8 E1FFFF1A 		bne	.L61
 194:../src/lcd.c  **** 
 195:../src/lcd.c  **** 	    lcd_puts(x, y, color, p );
 2796              		.loc 1 195 0
 2797 09ec BE115BE1 		ldrh	r1, [fp, #-30]
 2798 09f0 B0225BE1 		ldrh	r2, [fp, #-32]
 2799 09f4 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2800 09f8 0100A0E1 		mov	r0, r1
 2801 09fc 0210A0E1 		mov	r1, r2
 2802 0a00 0320A0E1 		mov	r2, r3
 2803 0a04 10301BE5 		ldr	r3, [fp, #-16]
 2804 0a08 FEFFFFEB 		bl	lcd_puts
 196:../src/lcd.c  **** }
 2805              		.loc 1 196 0
 2806 0a0c 0CD04BE2 		sub	sp, fp, #12
 2807 0a10 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2808 0a14 1EFF2FE1 		bx	lr
 2809              		.cfi_endproc
 2810              	.LFE13:
 2812              		.align	2
 2813              		.global	lcd_putchar_x2
 2815              	lcd_putchar_x2:
 2816              	.LFB14:
 197:../src/lcd.c  **** 
 198:../src/lcd.c  **** void lcd_putchar_x2(uint16 x, uint16 y, uint8 color, char ch)
 199:../src/lcd.c  **** {
 2817              		.loc 1 199 0
 2818              		.cfi_startproc
 2819              		@ Function supports interworking.
 2820              		@ args = 0, pretend = 0, frame = 16
 2821              		@ frame_needed = 1, uses_anonymous_args = 0
 2822 0a18 0DC0A0E1 		mov	ip, sp
 2823              	.LCFI28:
 2824              		.cfi_def_cfa_register 12
 2825 0a1c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2826 0a20 04B04CE2 		sub	fp, ip, #4
 2827              		.cfi_offset 14, -8
 2828              		.cfi_offset 13, -12
 2829              		.cfi_offset 11, -16
 2830              	.LCFI29:
 2831              		.cfi_def_cfa 11, 4
 2832 0a24 10D04DE2 		sub	sp, sp, #16
 2833 0a28 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2834 0a2c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2835 0a30 19204BE5 		strb	r2, [fp, #-25]
 2836 0a34 1A304BE5 		strb	r3, [fp, #-26]
 200:../src/lcd.c  ****     uint8 row, col;
 201:../src/lcd.c  ****     uint8 *bitmap = font + ch * 16;
 2837              		.loc 1 201 0
 2838 0a38 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2839 0a3c 0332A0E1 		mov	r3, r3, asl #4
 2840 0a40 0320A0E1 		mov	r2, r3
 2841 0a44 F8339FE5 		ldr	r3, .L69
 2842 0a48 033082E0 		add	r3, r2, r3
 2843 0a4c 14300BE5 		str	r3, [fp, #-20]
 202:../src/lcd.c  **** 
 203:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 2844              		.loc 1 203 0
 2845 0a50 0030A0E3 		mov	r3, #0
 2846 0a54 0D304BE5 		strb	r3, [fp, #-13]
 2847 0a58 F30000EA 		b	.L63
 2848              	.L68:
 204:../src/lcd.c  ****     {
 205:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 2849              		.loc 1 205 0
 2850 0a5c 0030A0E3 		mov	r3, #0
 2851 0a60 0E304BE5 		strb	r3, [fp, #-14]
 2852 0a64 EA0000EA 		b	.L64
 2853              	.L67:
 206:../src/lcd.c  ****         {
 207:../src/lcd.c  ****             if (bitmap[row] & (0x80 >> col))
 2854              		.loc 1 207 0
 2855 0a68 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2856 0a6c 14201BE5 		ldr	r2, [fp, #-20]
 2857 0a70 033082E0 		add	r3, r2, r3
 2858 0a74 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2859 0a78 0320A0E1 		mov	r2, r3
 2860 0a7c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2861 0a80 8010A0E3 		mov	r1, #128
 2862 0a84 5133A0E1 		mov	r3, r1, asr r3
 2863 0a88 033002E0 		and	r3, r2, r3
 2864 0a8c 000053E3 		cmp	r3, #0
 2865 0a90 7000000A 		beq	.L65
 208:../src/lcd.c  ****             {
 209:../src/lcd.c  ****                 lcd_putpixel(x + col * 2, y + row * 2, color);
 2866              		.loc 1 209 0
 2867 0a94 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2868 0a98 0338A0E1 		mov	r3, r3, asl #16
 2869 0a9c 2338A0E1 		mov	r3, r3, lsr #16
 2870 0aa0 8330A0E1 		mov	r3, r3, asl #1
 2871 0aa4 0338A0E1 		mov	r3, r3, asl #16
 2872 0aa8 2328A0E1 		mov	r2, r3, lsr #16
 2873 0aac B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2874 0ab0 033082E0 		add	r3, r2, r3
 2875 0ab4 0338A0E1 		mov	r3, r3, asl #16
 2876 0ab8 2318A0E1 		mov	r1, r3, lsr #16
 2877 0abc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2878 0ac0 0338A0E1 		mov	r3, r3, asl #16
 2879 0ac4 2338A0E1 		mov	r3, r3, lsr #16
 2880 0ac8 8330A0E1 		mov	r3, r3, asl #1
 2881 0acc 0338A0E1 		mov	r3, r3, asl #16
 2882 0ad0 2328A0E1 		mov	r2, r3, lsr #16
 2883 0ad4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2884 0ad8 033082E0 		add	r3, r2, r3
 2885 0adc 0338A0E1 		mov	r3, r3, asl #16
 2886 0ae0 2328A0E1 		mov	r2, r3, lsr #16
 2887 0ae4 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2888 0ae8 0100A0E1 		mov	r0, r1
 2889 0aec 0210A0E1 		mov	r1, r2
 2890 0af0 0320A0E1 		mov	r2, r3
 2891 0af4 FEFFFFEB 		bl	lcd_putpixel
 210:../src/lcd.c  ****                 lcd_putpixel(x + col * 2 + 1, y + row * 2, color);
 2892              		.loc 1 210 0
 2893 0af8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2894 0afc 0338A0E1 		mov	r3, r3, asl #16
 2895 0b00 2338A0E1 		mov	r3, r3, lsr #16
 2896 0b04 8330A0E1 		mov	r3, r3, asl #1
 2897 0b08 0338A0E1 		mov	r3, r3, asl #16
 2898 0b0c 2328A0E1 		mov	r2, r3, lsr #16
 2899 0b10 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2900 0b14 033082E0 		add	r3, r2, r3
 2901 0b18 0338A0E1 		mov	r3, r3, asl #16
 2902 0b1c 2338A0E1 		mov	r3, r3, lsr #16
 2903 0b20 013083E2 		add	r3, r3, #1
 2904 0b24 0338A0E1 		mov	r3, r3, asl #16
 2905 0b28 2318A0E1 		mov	r1, r3, lsr #16
 2906 0b2c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2907 0b30 0338A0E1 		mov	r3, r3, asl #16
 2908 0b34 2338A0E1 		mov	r3, r3, lsr #16
 2909 0b38 8330A0E1 		mov	r3, r3, asl #1
 2910 0b3c 0338A0E1 		mov	r3, r3, asl #16
 2911 0b40 2328A0E1 		mov	r2, r3, lsr #16
 2912 0b44 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2913 0b48 033082E0 		add	r3, r2, r3
 2914 0b4c 0338A0E1 		mov	r3, r3, asl #16
 2915 0b50 2328A0E1 		mov	r2, r3, lsr #16
 2916 0b54 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2917 0b58 0100A0E1 		mov	r0, r1
 2918 0b5c 0210A0E1 		mov	r1, r2
 2919 0b60 0320A0E1 		mov	r2, r3
 2920 0b64 FEFFFFEB 		bl	lcd_putpixel
 211:../src/lcd.c  ****                 lcd_putpixel(x + col * 2, y + row * 2 + 1, color);
 2921              		.loc 1 211 0
 2922 0b68 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2923 0b6c 0338A0E1 		mov	r3, r3, asl #16
 2924 0b70 2338A0E1 		mov	r3, r3, lsr #16
 2925 0b74 8330A0E1 		mov	r3, r3, asl #1
 2926 0b78 0338A0E1 		mov	r3, r3, asl #16
 2927 0b7c 2328A0E1 		mov	r2, r3, lsr #16
 2928 0b80 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2929 0b84 033082E0 		add	r3, r2, r3
 2930 0b88 0338A0E1 		mov	r3, r3, asl #16
 2931 0b8c 2318A0E1 		mov	r1, r3, lsr #16
 2932 0b90 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2933 0b94 0338A0E1 		mov	r3, r3, asl #16
 2934 0b98 2338A0E1 		mov	r3, r3, lsr #16
 2935 0b9c 8330A0E1 		mov	r3, r3, asl #1
 2936 0ba0 0338A0E1 		mov	r3, r3, asl #16
 2937 0ba4 2328A0E1 		mov	r2, r3, lsr #16
 2938 0ba8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2939 0bac 033082E0 		add	r3, r2, r3
 2940 0bb0 0338A0E1 		mov	r3, r3, asl #16
 2941 0bb4 2338A0E1 		mov	r3, r3, lsr #16
 2942 0bb8 013083E2 		add	r3, r3, #1
 2943 0bbc 0338A0E1 		mov	r3, r3, asl #16
 2944 0bc0 2328A0E1 		mov	r2, r3, lsr #16
 2945 0bc4 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2946 0bc8 0100A0E1 		mov	r0, r1
 2947 0bcc 0210A0E1 		mov	r1, r2
 2948 0bd0 0320A0E1 		mov	r2, r3
 2949 0bd4 FEFFFFEB 		bl	lcd_putpixel
 212:../src/lcd.c  ****                 lcd_putpixel(x + col * 2 + 1, y + row * 2 + 1, color);
 2950              		.loc 1 212 0
 2951 0bd8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2952 0bdc 0338A0E1 		mov	r3, r3, asl #16
 2953 0be0 2338A0E1 		mov	r3, r3, lsr #16
 2954 0be4 8330A0E1 		mov	r3, r3, asl #1
 2955 0be8 0338A0E1 		mov	r3, r3, asl #16
 2956 0bec 2328A0E1 		mov	r2, r3, lsr #16
 2957 0bf0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2958 0bf4 033082E0 		add	r3, r2, r3
 2959 0bf8 0338A0E1 		mov	r3, r3, asl #16
 2960 0bfc 2338A0E1 		mov	r3, r3, lsr #16
 2961 0c00 013083E2 		add	r3, r3, #1
 2962 0c04 0338A0E1 		mov	r3, r3, asl #16
 2963 0c08 2318A0E1 		mov	r1, r3, lsr #16
 2964 0c0c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2965 0c10 0338A0E1 		mov	r3, r3, asl #16
 2966 0c14 2338A0E1 		mov	r3, r3, lsr #16
 2967 0c18 8330A0E1 		mov	r3, r3, asl #1
 2968 0c1c 0338A0E1 		mov	r3, r3, asl #16
 2969 0c20 2328A0E1 		mov	r2, r3, lsr #16
 2970 0c24 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2971 0c28 033082E0 		add	r3, r2, r3
 2972 0c2c 0338A0E1 		mov	r3, r3, asl #16
 2973 0c30 2338A0E1 		mov	r3, r3, lsr #16
 2974 0c34 013083E2 		add	r3, r3, #1
 2975 0c38 0338A0E1 		mov	r3, r3, asl #16
 2976 0c3c 2328A0E1 		mov	r2, r3, lsr #16
 2977 0c40 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2978 0c44 0100A0E1 		mov	r0, r1
 2979 0c48 0210A0E1 		mov	r1, r2
 2980 0c4c 0320A0E1 		mov	r2, r3
 2981 0c50 FEFFFFEB 		bl	lcd_putpixel
 2982 0c54 6B0000EA 		b	.L66
 2983              	.L65:
 213:../src/lcd.c  ****             }
 214:../src/lcd.c  ****             else
 215:../src/lcd.c  ****             {
 216:../src/lcd.c  ****                 lcd_putpixel(x + col * 2, y + row * 2, WHITE);
 2984              		.loc 1 216 0
 2985 0c58 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2986 0c5c 0338A0E1 		mov	r3, r3, asl #16
 2987 0c60 2338A0E1 		mov	r3, r3, lsr #16
 2988 0c64 8330A0E1 		mov	r3, r3, asl #1
 2989 0c68 0338A0E1 		mov	r3, r3, asl #16
 2990 0c6c 2328A0E1 		mov	r2, r3, lsr #16
 2991 0c70 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2992 0c74 033082E0 		add	r3, r2, r3
 2993 0c78 0338A0E1 		mov	r3, r3, asl #16
 2994 0c7c 2328A0E1 		mov	r2, r3, lsr #16
 2995 0c80 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2996 0c84 0338A0E1 		mov	r3, r3, asl #16
 2997 0c88 2338A0E1 		mov	r3, r3, lsr #16
 2998 0c8c 8330A0E1 		mov	r3, r3, asl #1
 2999 0c90 0338A0E1 		mov	r3, r3, asl #16
 3000 0c94 2318A0E1 		mov	r1, r3, lsr #16
 3001 0c98 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3002 0c9c 033081E0 		add	r3, r1, r3
 3003 0ca0 0338A0E1 		mov	r3, r3, asl #16
 3004 0ca4 2338A0E1 		mov	r3, r3, lsr #16
 3005 0ca8 0200A0E1 		mov	r0, r2
 3006 0cac 0310A0E1 		mov	r1, r3
 3007 0cb0 0020A0E3 		mov	r2, #0
 3008 0cb4 FEFFFFEB 		bl	lcd_putpixel
 217:../src/lcd.c  ****                 lcd_putpixel(x + col * 2 + 1, y + row * 2, WHITE);
 3009              		.loc 1 217 0
 3010 0cb8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3011 0cbc 0338A0E1 		mov	r3, r3, asl #16
 3012 0cc0 2338A0E1 		mov	r3, r3, lsr #16
 3013 0cc4 8330A0E1 		mov	r3, r3, asl #1
 3014 0cc8 0338A0E1 		mov	r3, r3, asl #16
 3015 0ccc 2328A0E1 		mov	r2, r3, lsr #16
 3016 0cd0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3017 0cd4 033082E0 		add	r3, r2, r3
 3018 0cd8 0338A0E1 		mov	r3, r3, asl #16
 3019 0cdc 2338A0E1 		mov	r3, r3, lsr #16
 3020 0ce0 013083E2 		add	r3, r3, #1
 3021 0ce4 0338A0E1 		mov	r3, r3, asl #16
 3022 0ce8 2328A0E1 		mov	r2, r3, lsr #16
 3023 0cec 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3024 0cf0 0338A0E1 		mov	r3, r3, asl #16
 3025 0cf4 2338A0E1 		mov	r3, r3, lsr #16
 3026 0cf8 8330A0E1 		mov	r3, r3, asl #1
 3027 0cfc 0338A0E1 		mov	r3, r3, asl #16
 3028 0d00 2318A0E1 		mov	r1, r3, lsr #16
 3029 0d04 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3030 0d08 033081E0 		add	r3, r1, r3
 3031 0d0c 0338A0E1 		mov	r3, r3, asl #16
 3032 0d10 2338A0E1 		mov	r3, r3, lsr #16
 3033 0d14 0200A0E1 		mov	r0, r2
 3034 0d18 0310A0E1 		mov	r1, r3
 3035 0d1c 0020A0E3 		mov	r2, #0
 3036 0d20 FEFFFFEB 		bl	lcd_putpixel
 218:../src/lcd.c  ****                 lcd_putpixel(x + col * 2, y + row * 2 + 1, WHITE);
 3037              		.loc 1 218 0
 3038 0d24 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3039 0d28 0338A0E1 		mov	r3, r3, asl #16
 3040 0d2c 2338A0E1 		mov	r3, r3, lsr #16
 3041 0d30 8330A0E1 		mov	r3, r3, asl #1
 3042 0d34 0338A0E1 		mov	r3, r3, asl #16
 3043 0d38 2328A0E1 		mov	r2, r3, lsr #16
 3044 0d3c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3045 0d40 033082E0 		add	r3, r2, r3
 3046 0d44 0338A0E1 		mov	r3, r3, asl #16
 3047 0d48 2328A0E1 		mov	r2, r3, lsr #16
 3048 0d4c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3049 0d50 0338A0E1 		mov	r3, r3, asl #16
 3050 0d54 2338A0E1 		mov	r3, r3, lsr #16
 3051 0d58 8330A0E1 		mov	r3, r3, asl #1
 3052 0d5c 0338A0E1 		mov	r3, r3, asl #16
 3053 0d60 2318A0E1 		mov	r1, r3, lsr #16
 3054 0d64 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3055 0d68 033081E0 		add	r3, r1, r3
 3056 0d6c 0338A0E1 		mov	r3, r3, asl #16
 3057 0d70 2338A0E1 		mov	r3, r3, lsr #16
 3058 0d74 013083E2 		add	r3, r3, #1
 3059 0d78 0338A0E1 		mov	r3, r3, asl #16
 3060 0d7c 2338A0E1 		mov	r3, r3, lsr #16
 3061 0d80 0200A0E1 		mov	r0, r2
 3062 0d84 0310A0E1 		mov	r1, r3
 3063 0d88 0020A0E3 		mov	r2, #0
 3064 0d8c FEFFFFEB 		bl	lcd_putpixel
 219:../src/lcd.c  ****                 lcd_putpixel(x + col * 2 + 1, y + row * 2 + 1, WHITE);
 3065              		.loc 1 219 0
 3066 0d90 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3067 0d94 0338A0E1 		mov	r3, r3, asl #16
 3068 0d98 2338A0E1 		mov	r3, r3, lsr #16
 3069 0d9c 8330A0E1 		mov	r3, r3, asl #1
 3070 0da0 0338A0E1 		mov	r3, r3, asl #16
 3071 0da4 2328A0E1 		mov	r2, r3, lsr #16
 3072 0da8 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3073 0dac 033082E0 		add	r3, r2, r3
 3074 0db0 0338A0E1 		mov	r3, r3, asl #16
 3075 0db4 2338A0E1 		mov	r3, r3, lsr #16
 3076 0db8 013083E2 		add	r3, r3, #1
 3077 0dbc 0338A0E1 		mov	r3, r3, asl #16
 3078 0dc0 2328A0E1 		mov	r2, r3, lsr #16
 3079 0dc4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3080 0dc8 0338A0E1 		mov	r3, r3, asl #16
 3081 0dcc 2338A0E1 		mov	r3, r3, lsr #16
 3082 0dd0 8330A0E1 		mov	r3, r3, asl #1
 3083 0dd4 0338A0E1 		mov	r3, r3, asl #16
 3084 0dd8 2318A0E1 		mov	r1, r3, lsr #16
 3085 0ddc B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3086 0de0 033081E0 		add	r3, r1, r3
 3087 0de4 0338A0E1 		mov	r3, r3, asl #16
 3088 0de8 2338A0E1 		mov	r3, r3, lsr #16
 3089 0dec 013083E2 		add	r3, r3, #1
 3090 0df0 0338A0E1 		mov	r3, r3, asl #16
 3091 0df4 2338A0E1 		mov	r3, r3, lsr #16
 3092 0df8 0200A0E1 		mov	r0, r2
 3093 0dfc 0310A0E1 		mov	r1, r3
 3094 0e00 0020A0E3 		mov	r2, #0
 3095 0e04 FEFFFFEB 		bl	lcd_putpixel
 3096              	.L66:
 205:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 3097              		.loc 1 205 0
 3098 0e08 0E305BE5 		ldrb	r3, [fp, #-14]
 3099 0e0c 013083E2 		add	r3, r3, #1
 3100 0e10 0E304BE5 		strb	r3, [fp, #-14]
 3101              	.L64:
 205:../src/lcd.c  ****         for (col = 0; col < 8; col++)
 3102              		.loc 1 205 0 is_stmt 0 discriminator 1
 3103 0e14 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3104 0e18 070053E3 		cmp	r3, #7
 3105 0e1c 11FFFF9A 		bls	.L67
 203:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 3106              		.loc 1 203 0 is_stmt 1
 3107 0e20 0D305BE5 		ldrb	r3, [fp, #-13]
 3108 0e24 013083E2 		add	r3, r3, #1
 3109 0e28 0D304BE5 		strb	r3, [fp, #-13]
 3110              	.L63:
 203:../src/lcd.c  ****     for (row = 0; row < 16; row++)
 3111              		.loc 1 203 0 is_stmt 0 discriminator 1
 3112 0e2c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3113 0e30 0F0053E3 		cmp	r3, #15
 3114 0e34 08FFFF9A 		bls	.L68
 220:../src/lcd.c  ****             }
 221:../src/lcd.c  ****         }
 222:../src/lcd.c  ****     }
 223:../src/lcd.c  **** }
 3115              		.loc 1 223 0 is_stmt 1
 3116 0e38 0CD04BE2 		sub	sp, fp, #12
 3117 0e3c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3118 0e40 1EFF2FE1 		bx	lr
 3119              	.L70:
 3120              		.align	2
 3121              	.L69:
 3122 0e44 00000000 		.word	font
 3123              		.cfi_endproc
 3124              	.LFE14:
 3126              		.align	2
 3127              		.global	lcd_puts_x2
 3129              	lcd_puts_x2:
 3130              	.LFB15:
 224:../src/lcd.c  **** 
 225:../src/lcd.c  **** void lcd_puts_x2(uint16 x, uint16 y, uint8 color, char *s)
 226:../src/lcd.c  **** {
 3131              		.loc 1 226 0
 3132              		.cfi_startproc
 3133              		@ Function supports interworking.
 3134              		@ args = 0, pretend = 0, frame = 16
 3135              		@ frame_needed = 1, uses_anonymous_args = 0
 3136 0e48 0DC0A0E1 		mov	ip, sp
 3137              	.LCFI30:
 3138              		.cfi_def_cfa_register 12
 3139 0e4c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3140 0e50 04B04CE2 		sub	fp, ip, #4
 3141              		.cfi_offset 14, -8
 3142              		.cfi_offset 13, -12
 3143              		.cfi_offset 11, -16
 3144              	.LCFI31:
 3145              		.cfi_def_cfa 11, 4
 3146 0e54 10D04DE2 		sub	sp, sp, #16
 3147 0e58 18300BE5 		str	r3, [fp, #-24]
 3148 0e5c BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 3149 0e60 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 3150 0e64 0230A0E1 		mov	r3, r2
 3151 0e68 11304BE5 		strb	r3, [fp, #-17]
 227:../src/lcd.c  ****     while (*s)
 3152              		.loc 1 227 0
 3153 0e6c 0B0000EA 		b	.L72
 3154              	.L73:
 228:../src/lcd.c  ****     {
 229:../src/lcd.c  ****         lcd_putchar_x2(x, y, color, *s++);
 3155              		.loc 1 229 0
 3156 0e70 18301BE5 		ldr	r3, [fp, #-24]
 3157 0e74 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3158 0e78 18201BE5 		ldr	r2, [fp, #-24]
 3159 0e7c 012082E2 		add	r2, r2, #1
 3160 0e80 18200BE5 		str	r2, [fp, #-24]
 3161 0e84 BE005BE1 		ldrh	r0, [fp, #-14]
 3162 0e88 B0115BE1 		ldrh	r1, [fp, #-16]
 3163 0e8c 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3164 0e90 FEFFFFEB 		bl	lcd_putchar_x2
 230:../src/lcd.c  ****         x += 16; // Avanza la posición x para el siguiente carácter.
 3165              		.loc 1 230 0
 3166 0e94 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3167 0e98 103083E2 		add	r3, r3, #16
 3168 0e9c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3169              	.L72:
 227:../src/lcd.c  ****     while (*s)
 3170              		.loc 1 227 0 discriminator 1
 3171 0ea0 18301BE5 		ldr	r3, [fp, #-24]
 3172 0ea4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3173 0ea8 000053E3 		cmp	r3, #0
 3174 0eac EFFFFF1A 		bne	.L73
 231:../src/lcd.c  ****     }
 232:../src/lcd.c  **** }
 3175              		.loc 1 232 0
 3176 0eb0 0CD04BE2 		sub	sp, fp, #12
 3177 0eb4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3178 0eb8 1EFF2FE1 		bx	lr
 3179              		.cfi_endproc
 3180              	.LFE15:
 3182              		.align	2
 3183              		.global	lcd_putint_x2
 3185              	lcd_putint_x2:
 3186              	.LFB16:
 233:../src/lcd.c  **** 
 234:../src/lcd.c  **** void lcd_putint_x2(uint16 x, uint16 y, uint8 color, int32 i)
 235:../src/lcd.c  **** {
 3187              		.loc 1 235 0
 3188              		.cfi_startproc
 3189              		@ Function supports interworking.
 3190              		@ args = 0, pretend = 0, frame = 40
 3191              		@ frame_needed = 1, uses_anonymous_args = 0
 3192 0ebc 0DC0A0E1 		mov	ip, sp
 3193              	.LCFI32:
 3194              		.cfi_def_cfa_register 12
 3195 0ec0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3196 0ec4 04B04CE2 		sub	fp, ip, #4
 3197              		.cfi_offset 14, -8
 3198              		.cfi_offset 13, -12
 3199              		.cfi_offset 11, -16
 3200              	.LCFI33:
 3201              		.cfi_def_cfa 11, 4
 3202 0ec8 28D04DE2 		sub	sp, sp, #40
 3203 0ecc 30300BE5 		str	r3, [fp, #-48]
 3204 0ed0 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 3205 0ed4 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 3206 0ed8 0230A0E1 		mov	r3, r2
 3207 0edc 29304BE5 		strb	r3, [fp, #-41]
 236:../src/lcd.c  **** 	char buf[12];
 237:../src/lcd.c  **** 		   char *p = buf + 11;
 3208              		.loc 1 237 0
 3209 0ee0 20304BE2 		sub	r3, fp, #32
 3210 0ee4 0B3083E2 		add	r3, r3, #11
 3211 0ee8 10300BE5 		str	r3, [fp, #-16]
 238:../src/lcd.c  **** 		   int is_negative = 0;
 3212              		.loc 1 238 0
 3213 0eec 0030A0E3 		mov	r3, #0
 3214 0ef0 14300BE5 		str	r3, [fp, #-20]
 239:../src/lcd.c  **** 
 240:../src/lcd.c  **** 		   *p = '\0';
 3215              		.loc 1 240 0
 3216 0ef4 10301BE5 		ldr	r3, [fp, #-16]
 3217 0ef8 0020A0E3 		mov	r2, #0
 3218 0efc 0020C3E5 		strb	r2, [r3, #0]
 241:../src/lcd.c  **** 
 242:../src/lcd.c  **** 		   if (i < 0) {
 3219              		.loc 1 242 0
 3220 0f00 30301BE5 		ldr	r3, [fp, #-48]
 3221 0f04 000053E3 		cmp	r3, #0
 3222 0f08 040000AA 		bge	.L75
 243:../src/lcd.c  **** 		       is_negative = 1;
 3223              		.loc 1 243 0
 3224 0f0c 0130A0E3 		mov	r3, #1
 3225 0f10 14300BE5 		str	r3, [fp, #-20]
 244:../src/lcd.c  **** 		       i = -i;
 3226              		.loc 1 244 0
 3227 0f14 30301BE5 		ldr	r3, [fp, #-48]
 3228 0f18 003063E2 		rsb	r3, r3, #0
 3229 0f1c 30300BE5 		str	r3, [fp, #-48]
 3230              	.L75:
 245:../src/lcd.c  **** 		   }
 246:../src/lcd.c  **** 
 247:../src/lcd.c  **** 		   do {
 248:../src/lcd.c  **** 		       *--p = '0' + (i % 10);
 3231              		.loc 1 248 0 discriminator 1
 3232 0f20 10301BE5 		ldr	r3, [fp, #-16]
 3233 0f24 013043E2 		sub	r3, r3, #1
 3234 0f28 10300BE5 		str	r3, [fp, #-16]
 3235 0f2c 30101BE5 		ldr	r1, [fp, #-48]
 3236 0f30 AC309FE5 		ldr	r3, .L77
 3237 0f34 9123C3E0 		smull	r2, r3, r1, r3
 3238 0f38 4321A0E1 		mov	r2, r3, asr #2
 3239 0f3c C13FA0E1 		mov	r3, r1, asr #31
 3240 0f40 022063E0 		rsb	r2, r3, r2
 3241 0f44 0230A0E1 		mov	r3, r2
 3242 0f48 0331A0E1 		mov	r3, r3, asl #2
 3243 0f4c 023083E0 		add	r3, r3, r2
 3244 0f50 8330A0E1 		mov	r3, r3, asl #1
 3245 0f54 012063E0 		rsb	r2, r3, r1
 3246 0f58 FF3002E2 		and	r3, r2, #255
 3247 0f5c 303083E2 		add	r3, r3, #48
 3248 0f60 FF2003E2 		and	r2, r3, #255
 3249 0f64 10301BE5 		ldr	r3, [fp, #-16]
 3250 0f68 0020C3E5 		strb	r2, [r3, #0]
 249:../src/lcd.c  **** 		       i /= 10;
 3251              		.loc 1 249 0 discriminator 1
 3252 0f6c 30301BE5 		ldr	r3, [fp, #-48]
 3253 0f70 6C209FE5 		ldr	r2, .L77
 3254 0f74 9312C2E0 		smull	r1, r2, r3, r2
 3255 0f78 4221A0E1 		mov	r2, r2, asr #2
 3256 0f7c C33FA0E1 		mov	r3, r3, asr #31
 3257 0f80 023063E0 		rsb	r3, r3, r2
 3258 0f84 30300BE5 		str	r3, [fp, #-48]
 250:../src/lcd.c  **** 		   } while (i);
 3259              		.loc 1 250 0 discriminator 1
 3260 0f88 30301BE5 		ldr	r3, [fp, #-48]
 3261 0f8c 000053E3 		cmp	r3, #0
 3262 0f90 E2FFFF1A 		bne	.L75
 251:../src/lcd.c  **** 
 252:../src/lcd.c  **** 		   if (is_negative) {
 3263              		.loc 1 252 0
 3264 0f94 14301BE5 		ldr	r3, [fp, #-20]
 3265 0f98 000053E3 		cmp	r3, #0
 3266 0f9c 0500000A 		beq	.L76
 253:../src/lcd.c  **** 		       *--p = '-';
 3267              		.loc 1 253 0
 3268 0fa0 10301BE5 		ldr	r3, [fp, #-16]
 3269 0fa4 013043E2 		sub	r3, r3, #1
 3270 0fa8 10300BE5 		str	r3, [fp, #-16]
 3271 0fac 10301BE5 		ldr	r3, [fp, #-16]
 3272 0fb0 2D20A0E3 		mov	r2, #45
 3273 0fb4 0020C3E5 		strb	r2, [r3, #0]
 3274              	.L76:
 254:../src/lcd.c  **** 		   }
 255:../src/lcd.c  **** 
 256:../src/lcd.c  **** 		   lcd_puts_x2(x, y, color, p);
 3275              		.loc 1 256 0
 3276 0fb8 B6125BE1 		ldrh	r1, [fp, #-38]
 3277 0fbc B8225BE1 		ldrh	r2, [fp, #-40]
 3278 0fc0 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 3279 0fc4 0100A0E1 		mov	r0, r1
 3280 0fc8 0210A0E1 		mov	r1, r2
 3281 0fcc 0320A0E1 		mov	r2, r3
 3282 0fd0 10301BE5 		ldr	r3, [fp, #-16]
 3283 0fd4 FEFFFFEB 		bl	lcd_puts_x2
 257:../src/lcd.c  **** }
 3284              		.loc 1 257 0
 3285 0fd8 0CD04BE2 		sub	sp, fp, #12
 3286 0fdc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3287 0fe0 1EFF2FE1 		bx	lr
 3288              	.L78:
 3289              		.align	2
 3290              	.L77:
 3291 0fe4 67666666 		.word	1717986919
 3292              		.cfi_endproc
 3293              	.LFE16:
 3295              		.align	2
 3296              		.global	lcd_puthex_x2
 3298              	lcd_puthex_x2:
 3299              	.LFB17:
 258:../src/lcd.c  **** 
 259:../src/lcd.c  **** void lcd_puthex_x2(uint16 x, uint16 y, uint8 color, uint32 i)
 260:../src/lcd.c  **** {
 3300              		.loc 1 260 0
 3301              		.cfi_startproc
 3302              		@ Function supports interworking.
 3303              		@ args = 0, pretend = 0, frame = 32
 3304              		@ frame_needed = 1, uses_anonymous_args = 0
 3305 0fe8 0DC0A0E1 		mov	ip, sp
 3306              	.LCFI34:
 3307              		.cfi_def_cfa_register 12
 3308 0fec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3309 0ff0 04B04CE2 		sub	fp, ip, #4
 3310              		.cfi_offset 14, -8
 3311              		.cfi_offset 13, -12
 3312              		.cfi_offset 11, -16
 3313              	.LCFI35:
 3314              		.cfi_def_cfa 11, 4
 3315 0ff4 20D04DE2 		sub	sp, sp, #32
 3316 0ff8 28300BE5 		str	r3, [fp, #-40]
 3317 0ffc BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3318 1000 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3319 1004 0230A0E1 		mov	r3, r2
 3320 1008 21304BE5 		strb	r3, [fp, #-33]
 261:../src/lcd.c  **** 	char buf[8 + 1];
 262:../src/lcd.c  **** 		    char *p = buf + 8;
 3321              		.loc 1 262 0
 3322 100c 1C304BE2 		sub	r3, fp, #28
 3323 1010 083083E2 		add	r3, r3, #8
 3324 1014 10300BE5 		str	r3, [fp, #-16]
 263:../src/lcd.c  **** 		    uint8 c;
 264:../src/lcd.c  **** 
 265:../src/lcd.c  **** 		    *p = '\0';
 3325              		.loc 1 265 0
 3326 1018 10301BE5 		ldr	r3, [fp, #-16]
 3327 101c 0020A0E3 		mov	r2, #0
 3328 1020 0020C3E5 		strb	r2, [r3, #0]
 3329              	.L82:
 266:../src/lcd.c  **** 
 267:../src/lcd.c  **** 		    do {
 268:../src/lcd.c  **** 		        c = i & 0xf;
 3330              		.loc 1 268 0
 3331 1024 28301BE5 		ldr	r3, [fp, #-40]
 3332 1028 FF3003E2 		and	r3, r3, #255
 3333 102c 0F3003E2 		and	r3, r3, #15
 3334 1030 11304BE5 		strb	r3, [fp, #-17]
 269:../src/lcd.c  **** 		        if( c < 10 )
 3335              		.loc 1 269 0
 3336 1034 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3337 1038 090053E3 		cmp	r3, #9
 3338 103c 0800008A 		bhi	.L80
 270:../src/lcd.c  **** 		            *--p = '0' + c;
 3339              		.loc 1 270 0
 3340 1040 10301BE5 		ldr	r3, [fp, #-16]
 3341 1044 013043E2 		sub	r3, r3, #1
 3342 1048 10300BE5 		str	r3, [fp, #-16]
 3343 104c 11305BE5 		ldrb	r3, [fp, #-17]
 3344 1050 303083E2 		add	r3, r3, #48
 3345 1054 FF2003E2 		and	r2, r3, #255
 3346 1058 10301BE5 		ldr	r3, [fp, #-16]
 3347 105c 0020C3E5 		strb	r2, [r3, #0]
 3348 1060 070000EA 		b	.L81
 3349              	.L80:
 271:../src/lcd.c  **** 		        else
 272:../src/lcd.c  **** 		            *--p = 'a' + c - 10;
 3350              		.loc 1 272 0
 3351 1064 10301BE5 		ldr	r3, [fp, #-16]
 3352 1068 013043E2 		sub	r3, r3, #1
 3353 106c 10300BE5 		str	r3, [fp, #-16]
 3354 1070 11305BE5 		ldrb	r3, [fp, #-17]
 3355 1074 573083E2 		add	r3, r3, #87
 3356 1078 FF2003E2 		and	r2, r3, #255
 3357 107c 10301BE5 		ldr	r3, [fp, #-16]
 3358 1080 0020C3E5 		strb	r2, [r3, #0]
 3359              	.L81:
 273:../src/lcd.c  **** 		        i = i >> 4;
 3360              		.loc 1 273 0
 3361 1084 28301BE5 		ldr	r3, [fp, #-40]
 3362 1088 2332A0E1 		mov	r3, r3, lsr #4
 3363 108c 28300BE5 		str	r3, [fp, #-40]
 274:../src/lcd.c  **** 		    } while( i );
 3364              		.loc 1 274 0
 3365 1090 28301BE5 		ldr	r3, [fp, #-40]
 3366 1094 000053E3 		cmp	r3, #0
 3367 1098 E1FFFF1A 		bne	.L82
 275:../src/lcd.c  **** 
 276:../src/lcd.c  **** 		    lcd_puts_x2(x, y, color, p );
 3368              		.loc 1 276 0
 3369 109c BE115BE1 		ldrh	r1, [fp, #-30]
 3370 10a0 B0225BE1 		ldrh	r2, [fp, #-32]
 3371 10a4 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3372 10a8 0100A0E1 		mov	r0, r1
 3373 10ac 0210A0E1 		mov	r1, r2
 3374 10b0 0320A0E1 		mov	r2, r3
 3375 10b4 10301BE5 		ldr	r3, [fp, #-16]
 3376 10b8 FEFFFFEB 		bl	lcd_puts_x2
 277:../src/lcd.c  **** }
 3377              		.loc 1 277 0
 3378 10bc 0CD04BE2 		sub	sp, fp, #12
 3379 10c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3380 10c4 1EFF2FE1 		bx	lr
 3381              		.cfi_endproc
 3382              	.LFE17:
 3384              		.align	2
 3385              		.global	lcd_putWallpaper
 3387              	lcd_putWallpaper:
 3388              	.LFB18:
 278:../src/lcd.c  **** 
 279:../src/lcd.c  **** void lcd_putWallpaper(uint8 *bmp)
 280:../src/lcd.c  **** {
 3389              		.loc 1 280 0
 3390              		.cfi_startproc
 3391              		@ Function supports interworking.
 3392              		@ args = 0, pretend = 0, frame = 24
 3393              		@ frame_needed = 1, uses_anonymous_args = 0
 3394 10c8 0DC0A0E1 		mov	ip, sp
 3395              	.LCFI36:
 3396              		.cfi_def_cfa_register 12
 3397 10cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3398 10d0 04B04CE2 		sub	fp, ip, #4
 3399              		.cfi_offset 14, -8
 3400              		.cfi_offset 13, -12
 3401              		.cfi_offset 11, -16
 3402              	.LCFI37:
 3403              		.cfi_def_cfa 11, 4
 3404 10d4 18D04DE2 		sub	sp, sp, #24
 3405 10d8 20000BE5 		str	r0, [fp, #-32]
 281:../src/lcd.c  ****     uint32 headerSize;
 282:../src/lcd.c  ****     uint16 x, ySrc, yDst;
 283:../src/lcd.c  ****     uint16 offsetSrc, offsetDst;
 284:../src/lcd.c  **** 
 285:../src/lcd.c  ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 3406              		.loc 1 285 0
 3407 10dc 20301BE5 		ldr	r3, [fp, #-32]
 3408 10e0 0A3083E2 		add	r3, r3, #10
 3409 10e4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3410 10e8 0320A0E1 		mov	r2, r3
 3411 10ec 20301BE5 		ldr	r3, [fp, #-32]
 3412 10f0 0B3083E2 		add	r3, r3, #11
 3413 10f4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3414 10f8 0334A0E1 		mov	r3, r3, asl #8
 3415 10fc 032082E0 		add	r2, r2, r3
 3416 1100 20301BE5 		ldr	r3, [fp, #-32]
 3417 1104 0C3083E2 		add	r3, r3, #12
 3418 1108 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3419 110c 0338A0E1 		mov	r3, r3, asl #16
 3420 1110 032082E0 		add	r2, r2, r3
 3421 1114 20301BE5 		ldr	r3, [fp, #-32]
 3422 1118 0D3083E2 		add	r3, r3, #13
 3423 111c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3424 1120 033CA0E1 		mov	r3, r3, asl #24
 3425 1124 033082E0 		add	r3, r2, r3
 3426 1128 18300BE5 		str	r3, [fp, #-24]
 286:../src/lcd.c  ****     bmp += headerSize;
 3427              		.loc 1 286 0
 3428 112c 20201BE5 		ldr	r2, [fp, #-32]
 3429 1130 18301BE5 		ldr	r3, [fp, #-24]
 3430 1134 033082E0 		add	r3, r2, r3
 3431 1138 20300BE5 		str	r3, [fp, #-32]
 287:../src/lcd.c  **** 
 288:../src/lcd.c  ****     for (ySrc = 0, yDst = LCD_HEIGHT - 1; ySrc < LCD_HEIGHT; ySrc++, yDst--)
 3432              		.loc 1 288 0
 3433 113c 0030A0E3 		mov	r3, #0
 3434 1140 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3435 1144 EF30A0E3 		mov	r3, #239
 3436 1148 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3437 114c 2D0000EA 		b	.L84
 3438              	.L87:
 289:../src/lcd.c  ****     {
 290:../src/lcd.c  ****         offsetDst = yDst * LCD_WIDTH / 2;
 3439              		.loc 1 290 0
 3440 1150 B2215BE1 		ldrh	r2, [fp, #-18]
 3441 1154 0230A0E1 		mov	r3, r2
 3442 1158 0331A0E1 		mov	r3, r3, asl #2
 3443 115c 023083E0 		add	r3, r3, r2
 3444 1160 0333A0E1 		mov	r3, r3, asl #6
 3445 1164 A32FA0E1 		mov	r2, r3, lsr #31
 3446 1168 033082E0 		add	r3, r2, r3
 3447 116c C330A0E1 		mov	r3, r3, asr #1
 3448 1170 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 291:../src/lcd.c  ****         offsetSrc = ySrc * LCD_WIDTH / 2;
 3449              		.loc 1 291 0
 3450 1174 B0215BE1 		ldrh	r2, [fp, #-16]
 3451 1178 0230A0E1 		mov	r3, r2
 3452 117c 0331A0E1 		mov	r3, r3, asl #2
 3453 1180 023083E0 		add	r3, r3, r2
 3454 1184 0333A0E1 		mov	r3, r3, asl #6
 3455 1188 A32FA0E1 		mov	r2, r3, lsr #31
 3456 118c 033082E0 		add	r3, r2, r3
 3457 1190 C330A0E1 		mov	r3, r3, asr #1
 3458 1194 BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 292:../src/lcd.c  ****         for (x = 0; x < LCD_WIDTH / 2; x++)
 3459              		.loc 1 292 0
 3460 1198 0030A0E3 		mov	r3, #0
 3461 119c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3462 11a0 0F0000EA 		b	.L85
 3463              	.L86:
 293:../src/lcd.c  ****             lcd_buffer[offsetDst + x] = ~bmp[offsetSrc + x];
 3464              		.loc 1 293 0 discriminator 2
 3465 11a4 BA215BE1 		ldrh	r2, [fp, #-26]
 3466 11a8 BE305BE1 		ldrh	r3, [fp, #-14]
 3467 11ac 033082E0 		add	r3, r2, r3
 3468 11b0 BC115BE1 		ldrh	r1, [fp, #-28]
 3469 11b4 BE205BE1 		ldrh	r2, [fp, #-14]
 3470 11b8 022081E0 		add	r2, r1, r2
 3471 11bc 20101BE5 		ldr	r1, [fp, #-32]
 3472 11c0 022081E0 		add	r2, r1, r2
 3473 11c4 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3474 11c8 0220E0E1 		mvn	r2, r2
 3475 11cc FF1002E2 		and	r1, r2, #255
 3476 11d0 48209FE5 		ldr	r2, .L88
 3477 11d4 0310C2E7 		strb	r1, [r2, r3]
 292:../src/lcd.c  ****         for (x = 0; x < LCD_WIDTH / 2; x++)
 3478              		.loc 1 292 0 discriminator 2
 3479 11d8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3480 11dc 013083E2 		add	r3, r3, #1
 3481 11e0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3482              	.L85:
 292:../src/lcd.c  ****         for (x = 0; x < LCD_WIDTH / 2; x++)
 3483              		.loc 1 292 0 is_stmt 0 discriminator 1
 3484 11e4 BE305BE1 		ldrh	r3, [fp, #-14]
 3485 11e8 9F0053E3 		cmp	r3, #159
 3486 11ec ECFFFF9A 		bls	.L86
 288:../src/lcd.c  ****     for (ySrc = 0, yDst = LCD_HEIGHT - 1; ySrc < LCD_HEIGHT; ySrc++, yDst--)
 3487              		.loc 1 288 0 is_stmt 1
 3488 11f0 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3489 11f4 013083E2 		add	r3, r3, #1
 3490 11f8 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3491 11fc B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3492 1200 013043E2 		sub	r3, r3, #1
 3493 1204 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3494              	.L84:
 288:../src/lcd.c  ****     for (ySrc = 0, yDst = LCD_HEIGHT - 1; ySrc < LCD_HEIGHT; ySrc++, yDst--)
 3495              		.loc 1 288 0 is_stmt 0 discriminator 1
 3496 1208 B0315BE1 		ldrh	r3, [fp, #-16]
 3497 120c EF0053E3 		cmp	r3, #239
 3498 1210 CEFFFF9A 		bls	.L87
 294:../src/lcd.c  ****     }
 295:../src/lcd.c  **** }
 3499              		.loc 1 295 0 is_stmt 1
 3500 1214 0CD04BE2 		sub	sp, fp, #12
 3501 1218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3502 121c 1EFF2FE1 		bx	lr
 3503              	.L89:
 3504              		.align	2
 3505              	.L88:
 3506 1220 00000000 		.word	lcd_buffer
 3507              		.cfi_endproc
 3508              	.LFE18:
 3510              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1703   .bss:00000000 state
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1704   .bss:00000000 $d
                            *COM*:00009600 lcd_buffer
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1707   .text:00000000 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1710   .text:00000000 lcd_init
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1893   .text:000001c8 lcd_off
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1815   .text:00000110 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1847   .text:00000184 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1850   .text:00000184 lcd_on
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1886   .text:000001c4 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1890   .text:000001c8 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1929   .text:00000208 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1933   .text:0000020c $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1936   .text:0000020c lcd_status
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1964   .text:00000230 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1968   .text:00000234 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:1971   .text:00000234 lcd_clear
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2039   .text:000002b8 lcd_putpixel
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2032   .text:000002b4 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2036   .text:000002b8 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2126   .text:000003a0 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2130   .text:000003a4 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2133   .text:000003a4 lcd_getpixel
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2205   .text:00000454 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2209   .text:00000458 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2212   .text:00000458 lcd_draw_hrow
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2290   .text:00000500 lcd_draw_vrow
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2368   .text:000005a8 lcd_draw_box
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2432   .text:00000644 lcd_putchar
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2550   .text:00000794 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2554   .text:00000798 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2557   .text:00000798 lcd_puts
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2613   .text:0000080c lcd_putint
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2719   .text:00000934 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2723   .text:00000938 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2726   .text:00000938 lcd_puthex
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:2815   .text:00000a18 lcd_putchar_x2
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3122   .text:00000e44 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3126   .text:00000e48 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3129   .text:00000e48 lcd_puts_x2
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3185   .text:00000ebc lcd_putint_x2
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3291   .text:00000fe4 $d
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3295   .text:00000fe8 $a
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3298   .text:00000fe8 lcd_puthex_x2
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3387   .text:000010c8 lcd_putWallpaper
C:\Users\Catalina\AppData\Local\Temp\cc7fb9o9.s:3506   .text:00001220 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
